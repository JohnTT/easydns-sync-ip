/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegDataExtraFR type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegDataExtraFR{}

// RegDataExtraFR struct for RegDataExtraFR
type RegDataExtraFR struct {
	// Registrant type
	RegistrantType string `json:"registrant_type"`
	// Date of Birth
	DateOfBirth *string `json:"date_of_birth,omitempty"`
	// Country of Birth (2 letter ISO country code)
	CountryOfBirth *string `json:"country_of_birth,omitempty"`
	// Place of Birth
	PlaceOfBirth *string `json:"place_of_birth,omitempty"`
	// Postal Code of Birth
	PostalCodeOfBirth *string `json:"postal_code_of_birth,omitempty"`
	// Value Added Tax (VAT) Number
	RegistrantVatId *string `json:"registrant_vat_id,omitempty"`
	// SIREN or SIRET Code
	SirenSiret *string `json:"siren_siret,omitempty"`
	// Trademark Registration Number
	TrademarkNumber *string `json:"trademark_number,omitempty"`
}

type _RegDataExtraFR RegDataExtraFR

// NewRegDataExtraFR instantiates a new RegDataExtraFR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegDataExtraFR(registrantType string) *RegDataExtraFR {
	this := RegDataExtraFR{}
	this.RegistrantType = registrantType
	return &this
}

// NewRegDataExtraFRWithDefaults instantiates a new RegDataExtraFR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegDataExtraFRWithDefaults() *RegDataExtraFR {
	this := RegDataExtraFR{}
	return &this
}

// GetRegistrantType returns the RegistrantType field value
func (o *RegDataExtraFR) GetRegistrantType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistrantType
}

// GetRegistrantTypeOk returns a tuple with the RegistrantType field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraFR) GetRegistrantTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistrantType, true
}

// SetRegistrantType sets field value
func (o *RegDataExtraFR) SetRegistrantType(v string) {
	o.RegistrantType = v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *RegDataExtraFR) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegDataExtraFR) GetDateOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *RegDataExtraFR) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *RegDataExtraFR) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetCountryOfBirth returns the CountryOfBirth field value if set, zero value otherwise.
func (o *RegDataExtraFR) GetCountryOfBirth() string {
	if o == nil || IsNil(o.CountryOfBirth) {
		var ret string
		return ret
	}
	return *o.CountryOfBirth
}

// GetCountryOfBirthOk returns a tuple with the CountryOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegDataExtraFR) GetCountryOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.CountryOfBirth) {
		return nil, false
	}
	return o.CountryOfBirth, true
}

// HasCountryOfBirth returns a boolean if a field has been set.
func (o *RegDataExtraFR) HasCountryOfBirth() bool {
	if o != nil && !IsNil(o.CountryOfBirth) {
		return true
	}

	return false
}

// SetCountryOfBirth gets a reference to the given string and assigns it to the CountryOfBirth field.
func (o *RegDataExtraFR) SetCountryOfBirth(v string) {
	o.CountryOfBirth = &v
}

// GetPlaceOfBirth returns the PlaceOfBirth field value if set, zero value otherwise.
func (o *RegDataExtraFR) GetPlaceOfBirth() string {
	if o == nil || IsNil(o.PlaceOfBirth) {
		var ret string
		return ret
	}
	return *o.PlaceOfBirth
}

// GetPlaceOfBirthOk returns a tuple with the PlaceOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegDataExtraFR) GetPlaceOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceOfBirth) {
		return nil, false
	}
	return o.PlaceOfBirth, true
}

// HasPlaceOfBirth returns a boolean if a field has been set.
func (o *RegDataExtraFR) HasPlaceOfBirth() bool {
	if o != nil && !IsNil(o.PlaceOfBirth) {
		return true
	}

	return false
}

// SetPlaceOfBirth gets a reference to the given string and assigns it to the PlaceOfBirth field.
func (o *RegDataExtraFR) SetPlaceOfBirth(v string) {
	o.PlaceOfBirth = &v
}

// GetPostalCodeOfBirth returns the PostalCodeOfBirth field value if set, zero value otherwise.
func (o *RegDataExtraFR) GetPostalCodeOfBirth() string {
	if o == nil || IsNil(o.PostalCodeOfBirth) {
		var ret string
		return ret
	}
	return *o.PostalCodeOfBirth
}

// GetPostalCodeOfBirthOk returns a tuple with the PostalCodeOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegDataExtraFR) GetPostalCodeOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCodeOfBirth) {
		return nil, false
	}
	return o.PostalCodeOfBirth, true
}

// HasPostalCodeOfBirth returns a boolean if a field has been set.
func (o *RegDataExtraFR) HasPostalCodeOfBirth() bool {
	if o != nil && !IsNil(o.PostalCodeOfBirth) {
		return true
	}

	return false
}

// SetPostalCodeOfBirth gets a reference to the given string and assigns it to the PostalCodeOfBirth field.
func (o *RegDataExtraFR) SetPostalCodeOfBirth(v string) {
	o.PostalCodeOfBirth = &v
}

// GetRegistrantVatId returns the RegistrantVatId field value if set, zero value otherwise.
func (o *RegDataExtraFR) GetRegistrantVatId() string {
	if o == nil || IsNil(o.RegistrantVatId) {
		var ret string
		return ret
	}
	return *o.RegistrantVatId
}

// GetRegistrantVatIdOk returns a tuple with the RegistrantVatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegDataExtraFR) GetRegistrantVatIdOk() (*string, bool) {
	if o == nil || IsNil(o.RegistrantVatId) {
		return nil, false
	}
	return o.RegistrantVatId, true
}

// HasRegistrantVatId returns a boolean if a field has been set.
func (o *RegDataExtraFR) HasRegistrantVatId() bool {
	if o != nil && !IsNil(o.RegistrantVatId) {
		return true
	}

	return false
}

// SetRegistrantVatId gets a reference to the given string and assigns it to the RegistrantVatId field.
func (o *RegDataExtraFR) SetRegistrantVatId(v string) {
	o.RegistrantVatId = &v
}

// GetSirenSiret returns the SirenSiret field value if set, zero value otherwise.
func (o *RegDataExtraFR) GetSirenSiret() string {
	if o == nil || IsNil(o.SirenSiret) {
		var ret string
		return ret
	}
	return *o.SirenSiret
}

// GetSirenSiretOk returns a tuple with the SirenSiret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegDataExtraFR) GetSirenSiretOk() (*string, bool) {
	if o == nil || IsNil(o.SirenSiret) {
		return nil, false
	}
	return o.SirenSiret, true
}

// HasSirenSiret returns a boolean if a field has been set.
func (o *RegDataExtraFR) HasSirenSiret() bool {
	if o != nil && !IsNil(o.SirenSiret) {
		return true
	}

	return false
}

// SetSirenSiret gets a reference to the given string and assigns it to the SirenSiret field.
func (o *RegDataExtraFR) SetSirenSiret(v string) {
	o.SirenSiret = &v
}

// GetTrademarkNumber returns the TrademarkNumber field value if set, zero value otherwise.
func (o *RegDataExtraFR) GetTrademarkNumber() string {
	if o == nil || IsNil(o.TrademarkNumber) {
		var ret string
		return ret
	}
	return *o.TrademarkNumber
}

// GetTrademarkNumberOk returns a tuple with the TrademarkNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegDataExtraFR) GetTrademarkNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TrademarkNumber) {
		return nil, false
	}
	return o.TrademarkNumber, true
}

// HasTrademarkNumber returns a boolean if a field has been set.
func (o *RegDataExtraFR) HasTrademarkNumber() bool {
	if o != nil && !IsNil(o.TrademarkNumber) {
		return true
	}

	return false
}

// SetTrademarkNumber gets a reference to the given string and assigns it to the TrademarkNumber field.
func (o *RegDataExtraFR) SetTrademarkNumber(v string) {
	o.TrademarkNumber = &v
}

func (o RegDataExtraFR) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegDataExtraFR) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registrant_type"] = o.RegistrantType
	if !IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if !IsNil(o.CountryOfBirth) {
		toSerialize["country_of_birth"] = o.CountryOfBirth
	}
	if !IsNil(o.PlaceOfBirth) {
		toSerialize["place_of_birth"] = o.PlaceOfBirth
	}
	if !IsNil(o.PostalCodeOfBirth) {
		toSerialize["postal_code_of_birth"] = o.PostalCodeOfBirth
	}
	if !IsNil(o.RegistrantVatId) {
		toSerialize["registrant_vat_id"] = o.RegistrantVatId
	}
	if !IsNil(o.SirenSiret) {
		toSerialize["siren_siret"] = o.SirenSiret
	}
	if !IsNil(o.TrademarkNumber) {
		toSerialize["trademark_number"] = o.TrademarkNumber
	}
	return toSerialize, nil
}

func (o *RegDataExtraFR) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registrant_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegDataExtraFR := _RegDataExtraFR{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegDataExtraFR)

	if err != nil {
		return err
	}

	*o = RegDataExtraFR(varRegDataExtraFR)

	return err
}

type NullableRegDataExtraFR struct {
	value *RegDataExtraFR
	isSet bool
}

func (v NullableRegDataExtraFR) Get() *RegDataExtraFR {
	return v.value
}

func (v *NullableRegDataExtraFR) Set(val *RegDataExtraFR) {
	v.value = val
	v.isSet = true
}

func (v NullableRegDataExtraFR) IsSet() bool {
	return v.isSet
}

func (v *NullableRegDataExtraFR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegDataExtraFR(val *RegDataExtraFR) *NullableRegDataExtraFR {
	return &NullableRegDataExtraFR{value: val, isSet: true}
}

func (v NullableRegDataExtraFR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegDataExtraFR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


