/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelCreateUserData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelCreateUserData{}

// ResultModelCreateUserData struct for ResultModelCreateUserData
type ResultModelCreateUserData struct {
	User string `json:"user"`
	// The default currency used for the new user account
	Currency string `json:"currency"`
	// New users state/province (2 letter code)
	State string `json:"state"`
	// New users country (2 letter ISO country code)
	Country string `json:"country"`
	// Primary contact email for new user account
	Email string `json:"email"`
	// The postal/zip code of the new user account
	PostalCode *string `json:"postal_code,omitempty"`
	// Primary contact number for new user account
	Phone *string `json:"phone,omitempty"`
	// First name of new user
	FirstName string `json:"first_name"`
	// Last name of new user
	LastName string `json:"last_name"`
	// API token value for the new user account. Required in combination with key to authenticate with API as new user.
	Token string `json:"token"`
	// API key value for the new user account. Required in combination with token to authenticate with API as new user. This value should be kept secret.
	Key string `json:"key"`
}

type _ResultModelCreateUserData ResultModelCreateUserData

// NewResultModelCreateUserData instantiates a new ResultModelCreateUserData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelCreateUserData(user string, currency string, state string, country string, email string, firstName string, lastName string, token string, key string) *ResultModelCreateUserData {
	this := ResultModelCreateUserData{}
	this.User = user
	this.Currency = currency
	this.State = state
	this.Country = country
	this.Email = email
	this.FirstName = firstName
	this.LastName = lastName
	this.Token = token
	this.Key = key
	return &this
}

// NewResultModelCreateUserDataWithDefaults instantiates a new ResultModelCreateUserData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelCreateUserDataWithDefaults() *ResultModelCreateUserData {
	this := ResultModelCreateUserData{}
	return &this
}

// GetUser returns the User field value
func (o *ResultModelCreateUserData) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ResultModelCreateUserData) SetUser(v string) {
	o.User = v
}

// GetCurrency returns the Currency field value
func (o *ResultModelCreateUserData) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ResultModelCreateUserData) SetCurrency(v string) {
	o.Currency = v
}

// GetState returns the State field value
func (o *ResultModelCreateUserData) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ResultModelCreateUserData) SetState(v string) {
	o.State = v
}

// GetCountry returns the Country field value
func (o *ResultModelCreateUserData) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *ResultModelCreateUserData) SetCountry(v string) {
	o.Country = v
}

// GetEmail returns the Email field value
func (o *ResultModelCreateUserData) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ResultModelCreateUserData) SetEmail(v string) {
	o.Email = v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *ResultModelCreateUserData) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *ResultModelCreateUserData) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *ResultModelCreateUserData) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *ResultModelCreateUserData) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *ResultModelCreateUserData) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *ResultModelCreateUserData) SetPhone(v string) {
	o.Phone = &v
}

// GetFirstName returns the FirstName field value
func (o *ResultModelCreateUserData) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *ResultModelCreateUserData) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *ResultModelCreateUserData) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *ResultModelCreateUserData) SetLastName(v string) {
	o.LastName = v
}

// GetToken returns the Token field value
func (o *ResultModelCreateUserData) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *ResultModelCreateUserData) SetToken(v string) {
	o.Token = v
}

// GetKey returns the Key field value
func (o *ResultModelCreateUserData) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUserData) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ResultModelCreateUserData) SetKey(v string) {
	o.Key = v
}

func (o ResultModelCreateUserData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelCreateUserData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["currency"] = o.Currency
	toSerialize["state"] = o.State
	toSerialize["country"] = o.Country
	toSerialize["email"] = o.Email
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	toSerialize["token"] = o.Token
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

func (o *ResultModelCreateUserData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
		"currency",
		"state",
		"country",
		"email",
		"first_name",
		"last_name",
		"token",
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelCreateUserData := _ResultModelCreateUserData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelCreateUserData)

	if err != nil {
		return err
	}

	*o = ResultModelCreateUserData(varResultModelCreateUserData)

	return err
}

type NullableResultModelCreateUserData struct {
	value *ResultModelCreateUserData
	isSet bool
}

func (v NullableResultModelCreateUserData) Get() *ResultModelCreateUserData {
	return v.value
}

func (v *NullableResultModelCreateUserData) Set(val *ResultModelCreateUserData) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelCreateUserData) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelCreateUserData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelCreateUserData(val *ResultModelCreateUserData) *NullableResultModelCreateUserData {
	return &NullableResultModelCreateUserData{value: val, isSet: true}
}

func (v NullableResultModelCreateUserData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelCreateUserData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


