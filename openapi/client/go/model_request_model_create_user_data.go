/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RequestModelCreateUserData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestModelCreateUserData{}

// RequestModelCreateUserData struct for RequestModelCreateUserData
type RequestModelCreateUserData struct {
	// First name of new user
	FirstName *string `json:"first_name,omitempty"`
	// Last name of new user
	LastName *string `json:"last_name,omitempty"`
	// Organization of new user account
	OrgName *string `json:"org_name,omitempty"`
	// Address of new user
	Address1 *string `json:"address1,omitempty"`
	// Address of new user
	Address2 *string `json:"address2,omitempty"`
	// City of the new user
	City *string `json:"city,omitempty"`
	// New users state/province (2 letter code)
	State string `json:"state"`
	// New users country (2 letter ISO country code)
	Country string `json:"country"`
	// The postal/zip code of the new user account
	PostalCode *string `json:"postal_code,omitempty"`
	// Primary contact number for new user account
	Phone *string `json:"phone,omitempty"`
	// Primary contact email for new user account
	Email string `json:"email"`
	// The default currency to use for the new user account. This is required to allow creation of domains for a new user without first logging in to control panel (account will still need to be funded first)
	Currency string `json:"currency"`
	// Use the provided password for the new user account. If not provided a random password will be created for user and returned as part of result
	Password *string `json:"password,omitempty"`
	// Visitor code used during user creation
	Vcode *string `json:"vcode,omitempty"`
	// Country code of originator of request (2 letter ISO country code)
	RemoteCc *string `json:"remote_cc,omitempty"`
	// IP address of originator of request
	RemoteIp *string `json:"remote_ip,omitempty"`
	// Hostname of originator of request
	RemoteHost *string `json:"remote_host,omitempty"`
}

type _RequestModelCreateUserData RequestModelCreateUserData

// NewRequestModelCreateUserData instantiates a new RequestModelCreateUserData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestModelCreateUserData(state string, country string, email string, currency string) *RequestModelCreateUserData {
	this := RequestModelCreateUserData{}
	this.State = state
	this.Country = country
	this.Email = email
	this.Currency = currency
	return &this
}

// NewRequestModelCreateUserDataWithDefaults instantiates a new RequestModelCreateUserData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestModelCreateUserDataWithDefaults() *RequestModelCreateUserData {
	this := RequestModelCreateUserData{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *RequestModelCreateUserData) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *RequestModelCreateUserData) SetLastName(v string) {
	o.LastName = &v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *RequestModelCreateUserData) SetOrgName(v string) {
	o.OrgName = &v
}

// GetAddress1 returns the Address1 field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetAddress1() string {
	if o == nil || IsNil(o.Address1) {
		var ret string
		return ret
	}
	return *o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetAddress1Ok() (*string, bool) {
	if o == nil || IsNil(o.Address1) {
		return nil, false
	}
	return o.Address1, true
}

// HasAddress1 returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasAddress1() bool {
	if o != nil && !IsNil(o.Address1) {
		return true
	}

	return false
}

// SetAddress1 gets a reference to the given string and assigns it to the Address1 field.
func (o *RequestModelCreateUserData) SetAddress1(v string) {
	o.Address1 = &v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetAddress2() string {
	if o == nil || IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasAddress2() bool {
	if o != nil && !IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *RequestModelCreateUserData) SetAddress2(v string) {
	o.Address2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *RequestModelCreateUserData) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value
func (o *RequestModelCreateUserData) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *RequestModelCreateUserData) SetState(v string) {
	o.State = v
}

// GetCountry returns the Country field value
func (o *RequestModelCreateUserData) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *RequestModelCreateUserData) SetCountry(v string) {
	o.Country = v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *RequestModelCreateUserData) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *RequestModelCreateUserData) SetPhone(v string) {
	o.Phone = &v
}

// GetEmail returns the Email field value
func (o *RequestModelCreateUserData) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *RequestModelCreateUserData) SetEmail(v string) {
	o.Email = v
}

// GetCurrency returns the Currency field value
func (o *RequestModelCreateUserData) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *RequestModelCreateUserData) SetCurrency(v string) {
	o.Currency = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *RequestModelCreateUserData) SetPassword(v string) {
	o.Password = &v
}

// GetVcode returns the Vcode field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetVcode() string {
	if o == nil || IsNil(o.Vcode) {
		var ret string
		return ret
	}
	return *o.Vcode
}

// GetVcodeOk returns a tuple with the Vcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetVcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Vcode) {
		return nil, false
	}
	return o.Vcode, true
}

// HasVcode returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasVcode() bool {
	if o != nil && !IsNil(o.Vcode) {
		return true
	}

	return false
}

// SetVcode gets a reference to the given string and assigns it to the Vcode field.
func (o *RequestModelCreateUserData) SetVcode(v string) {
	o.Vcode = &v
}

// GetRemoteCc returns the RemoteCc field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetRemoteCc() string {
	if o == nil || IsNil(o.RemoteCc) {
		var ret string
		return ret
	}
	return *o.RemoteCc
}

// GetRemoteCcOk returns a tuple with the RemoteCc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetRemoteCcOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteCc) {
		return nil, false
	}
	return o.RemoteCc, true
}

// HasRemoteCc returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasRemoteCc() bool {
	if o != nil && !IsNil(o.RemoteCc) {
		return true
	}

	return false
}

// SetRemoteCc gets a reference to the given string and assigns it to the RemoteCc field.
func (o *RequestModelCreateUserData) SetRemoteCc(v string) {
	o.RemoteCc = &v
}

// GetRemoteIp returns the RemoteIp field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetRemoteIp() string {
	if o == nil || IsNil(o.RemoteIp) {
		var ret string
		return ret
	}
	return *o.RemoteIp
}

// GetRemoteIpOk returns a tuple with the RemoteIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetRemoteIpOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteIp) {
		return nil, false
	}
	return o.RemoteIp, true
}

// HasRemoteIp returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasRemoteIp() bool {
	if o != nil && !IsNil(o.RemoteIp) {
		return true
	}

	return false
}

// SetRemoteIp gets a reference to the given string and assigns it to the RemoteIp field.
func (o *RequestModelCreateUserData) SetRemoteIp(v string) {
	o.RemoteIp = &v
}

// GetRemoteHost returns the RemoteHost field value if set, zero value otherwise.
func (o *RequestModelCreateUserData) GetRemoteHost() string {
	if o == nil || IsNil(o.RemoteHost) {
		var ret string
		return ret
	}
	return *o.RemoteHost
}

// GetRemoteHostOk returns a tuple with the RemoteHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestModelCreateUserData) GetRemoteHostOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteHost) {
		return nil, false
	}
	return o.RemoteHost, true
}

// HasRemoteHost returns a boolean if a field has been set.
func (o *RequestModelCreateUserData) HasRemoteHost() bool {
	if o != nil && !IsNil(o.RemoteHost) {
		return true
	}

	return false
}

// SetRemoteHost gets a reference to the given string and assigns it to the RemoteHost field.
func (o *RequestModelCreateUserData) SetRemoteHost(v string) {
	o.RemoteHost = &v
}

func (o RequestModelCreateUserData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestModelCreateUserData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.OrgName) {
		toSerialize["org_name"] = o.OrgName
	}
	if !IsNil(o.Address1) {
		toSerialize["address1"] = o.Address1
	}
	if !IsNil(o.Address2) {
		toSerialize["address2"] = o.Address2
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	toSerialize["state"] = o.State
	toSerialize["country"] = o.Country
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	toSerialize["email"] = o.Email
	toSerialize["currency"] = o.Currency
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Vcode) {
		toSerialize["vcode"] = o.Vcode
	}
	if !IsNil(o.RemoteCc) {
		toSerialize["remote_cc"] = o.RemoteCc
	}
	if !IsNil(o.RemoteIp) {
		toSerialize["remote_ip"] = o.RemoteIp
	}
	if !IsNil(o.RemoteHost) {
		toSerialize["remote_host"] = o.RemoteHost
	}
	return toSerialize, nil
}

func (o *RequestModelCreateUserData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state",
		"country",
		"email",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestModelCreateUserData := _RequestModelCreateUserData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestModelCreateUserData)

	if err != nil {
		return err
	}

	*o = RequestModelCreateUserData(varRequestModelCreateUserData)

	return err
}

type NullableRequestModelCreateUserData struct {
	value *RequestModelCreateUserData
	isSet bool
}

func (v NullableRequestModelCreateUserData) Get() *RequestModelCreateUserData {
	return v.value
}

func (v *NullableRequestModelCreateUserData) Set(val *RequestModelCreateUserData) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestModelCreateUserData) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestModelCreateUserData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestModelCreateUserData(val *RequestModelCreateUserData) *NullableRequestModelCreateUserData {
	return &NullableRequestModelCreateUserData{value: val, isSet: true}
}

func (v NullableRequestModelCreateUserData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestModelCreateUserData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


