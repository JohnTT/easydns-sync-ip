/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelGeoListData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelGeoListData{}

// ResultModelGeoListData struct for ResultModelGeoListData
type ResultModelGeoListData struct {
	// The numeric ID of the described geo region
	Id int32 `json:"id"`
	// The short name for the described geo region
	GeoCode string `json:"geo_code"`
	// Phyisical location of the described geo region
	Location string `json:"location"`
}

type _ResultModelGeoListData ResultModelGeoListData

// NewResultModelGeoListData instantiates a new ResultModelGeoListData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelGeoListData(id int32, geoCode string, location string) *ResultModelGeoListData {
	this := ResultModelGeoListData{}
	this.Id = id
	this.GeoCode = geoCode
	this.Location = location
	return &this
}

// NewResultModelGeoListDataWithDefaults instantiates a new ResultModelGeoListData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelGeoListDataWithDefaults() *ResultModelGeoListData {
	this := ResultModelGeoListData{}
	return &this
}

// GetId returns the Id field value
func (o *ResultModelGeoListData) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResultModelGeoListData) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResultModelGeoListData) SetId(v int32) {
	o.Id = v
}

// GetGeoCode returns the GeoCode field value
func (o *ResultModelGeoListData) GetGeoCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GeoCode
}

// GetGeoCodeOk returns a tuple with the GeoCode field value
// and a boolean to check if the value has been set.
func (o *ResultModelGeoListData) GetGeoCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GeoCode, true
}

// SetGeoCode sets field value
func (o *ResultModelGeoListData) SetGeoCode(v string) {
	o.GeoCode = v
}

// GetLocation returns the Location field value
func (o *ResultModelGeoListData) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *ResultModelGeoListData) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *ResultModelGeoListData) SetLocation(v string) {
	o.Location = v
}

func (o ResultModelGeoListData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelGeoListData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["geo_code"] = o.GeoCode
	toSerialize["location"] = o.Location
	return toSerialize, nil
}

func (o *ResultModelGeoListData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"geo_code",
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelGeoListData := _ResultModelGeoListData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelGeoListData)

	if err != nil {
		return err
	}

	*o = ResultModelGeoListData(varResultModelGeoListData)

	return err
}

type NullableResultModelGeoListData struct {
	value *ResultModelGeoListData
	isSet bool
}

func (v NullableResultModelGeoListData) Get() *ResultModelGeoListData {
	return v.value
}

func (v *NullableResultModelGeoListData) Set(val *ResultModelGeoListData) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelGeoListData) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelGeoListData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelGeoListData(val *ResultModelGeoListData) *NullableResultModelGeoListData {
	return &NullableResultModelGeoListData{value: val, isSet: true}
}

func (v NullableResultModelGeoListData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelGeoListData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


