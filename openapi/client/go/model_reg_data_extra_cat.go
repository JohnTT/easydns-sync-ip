/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegDataExtraCAT type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegDataExtraCAT{}

// RegDataExtraCAT struct for RegDataExtraCAT
type RegDataExtraCAT struct {
	RegistrantType string `json:"registrant_type"`
	IntendedUse string `json:"intended_use"`
}

type _RegDataExtraCAT RegDataExtraCAT

// NewRegDataExtraCAT instantiates a new RegDataExtraCAT object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegDataExtraCAT(registrantType string, intendedUse string) *RegDataExtraCAT {
	this := RegDataExtraCAT{}
	this.RegistrantType = registrantType
	this.IntendedUse = intendedUse
	return &this
}

// NewRegDataExtraCATWithDefaults instantiates a new RegDataExtraCAT object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegDataExtraCATWithDefaults() *RegDataExtraCAT {
	this := RegDataExtraCAT{}
	return &this
}

// GetRegistrantType returns the RegistrantType field value
func (o *RegDataExtraCAT) GetRegistrantType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistrantType
}

// GetRegistrantTypeOk returns a tuple with the RegistrantType field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraCAT) GetRegistrantTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistrantType, true
}

// SetRegistrantType sets field value
func (o *RegDataExtraCAT) SetRegistrantType(v string) {
	o.RegistrantType = v
}

// GetIntendedUse returns the IntendedUse field value
func (o *RegDataExtraCAT) GetIntendedUse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntendedUse
}

// GetIntendedUseOk returns a tuple with the IntendedUse field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraCAT) GetIntendedUseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntendedUse, true
}

// SetIntendedUse sets field value
func (o *RegDataExtraCAT) SetIntendedUse(v string) {
	o.IntendedUse = v
}

func (o RegDataExtraCAT) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegDataExtraCAT) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registrant_type"] = o.RegistrantType
	toSerialize["intended_use"] = o.IntendedUse
	return toSerialize, nil
}

func (o *RegDataExtraCAT) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registrant_type",
		"intended_use",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegDataExtraCAT := _RegDataExtraCAT{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegDataExtraCAT)

	if err != nil {
		return err
	}

	*o = RegDataExtraCAT(varRegDataExtraCAT)

	return err
}

type NullableRegDataExtraCAT struct {
	value *RegDataExtraCAT
	isSet bool
}

func (v NullableRegDataExtraCAT) Get() *RegDataExtraCAT {
	return v.value
}

func (v *NullableRegDataExtraCAT) Set(val *RegDataExtraCAT) {
	v.value = val
	v.isSet = true
}

func (v NullableRegDataExtraCAT) IsSet() bool {
	return v.isSet
}

func (v *NullableRegDataExtraCAT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegDataExtraCAT(val *RegDataExtraCAT) *NullableRegDataExtraCAT {
	return &NullableRegDataExtraCAT{value: val, isSet: true}
}

func (v NullableRegDataExtraCAT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegDataExtraCAT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


