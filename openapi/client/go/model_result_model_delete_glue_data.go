/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelDeleteGlueData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelDeleteGlueData{}

// ResultModelDeleteGlueData Response data related to request
type ResultModelDeleteGlueData struct {
	// The domain the glue records are provided by
	Domain string `json:"domain"`
	// The hostname for the glue record that was looked up
	Fqdn string `json:"fqdn"`
}

type _ResultModelDeleteGlueData ResultModelDeleteGlueData

// NewResultModelDeleteGlueData instantiates a new ResultModelDeleteGlueData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelDeleteGlueData(domain string, fqdn string) *ResultModelDeleteGlueData {
	this := ResultModelDeleteGlueData{}
	this.Domain = domain
	this.Fqdn = fqdn
	return &this
}

// NewResultModelDeleteGlueDataWithDefaults instantiates a new ResultModelDeleteGlueData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelDeleteGlueDataWithDefaults() *ResultModelDeleteGlueData {
	this := ResultModelDeleteGlueData{}
	return &this
}

// GetDomain returns the Domain field value
func (o *ResultModelDeleteGlueData) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ResultModelDeleteGlueData) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ResultModelDeleteGlueData) SetDomain(v string) {
	o.Domain = v
}

// GetFqdn returns the Fqdn field value
func (o *ResultModelDeleteGlueData) GetFqdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value
// and a boolean to check if the value has been set.
func (o *ResultModelDeleteGlueData) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fqdn, true
}

// SetFqdn sets field value
func (o *ResultModelDeleteGlueData) SetFqdn(v string) {
	o.Fqdn = v
}

func (o ResultModelDeleteGlueData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelDeleteGlueData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["fqdn"] = o.Fqdn
	return toSerialize, nil
}

func (o *ResultModelDeleteGlueData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"fqdn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelDeleteGlueData := _ResultModelDeleteGlueData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelDeleteGlueData)

	if err != nil {
		return err
	}

	*o = ResultModelDeleteGlueData(varResultModelDeleteGlueData)

	return err
}

type NullableResultModelDeleteGlueData struct {
	value *ResultModelDeleteGlueData
	isSet bool
}

func (v NullableResultModelDeleteGlueData) Get() *ResultModelDeleteGlueData {
	return v.value
}

func (v *NullableResultModelDeleteGlueData) Set(val *ResultModelDeleteGlueData) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelDeleteGlueData) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelDeleteGlueData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelDeleteGlueData(val *ResultModelDeleteGlueData) *NullableResultModelDeleteGlueData {
	return &NullableResultModelDeleteGlueData{value: val, isSet: true}
}

func (v NullableResultModelDeleteGlueData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelDeleteGlueData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


