/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelZoneRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelZoneRecord{}

// ResultModelZoneRecord struct for ResultModelZoneRecord
type ResultModelZoneRecord struct {
	Id int32 `json:"id"`
	Domain string `json:"domain"`
	Host string `json:"host"`
	Ttl *int32 `json:"ttl,omitempty"`
	Prio *int32 `json:"prio,omitempty"`
	GeozoneId *int32 `json:"geozone_id,omitempty"`
	Type string `json:"type"`
	Rdata string `json:"rdata"`
	LastMod *string `json:"last_mod,omitempty"`
}

type _ResultModelZoneRecord ResultModelZoneRecord

// NewResultModelZoneRecord instantiates a new ResultModelZoneRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelZoneRecord(id int32, domain string, host string, type_ string, rdata string) *ResultModelZoneRecord {
	this := ResultModelZoneRecord{}
	this.Id = id
	this.Domain = domain
	this.Host = host
	this.Type = type_
	this.Rdata = rdata
	return &this
}

// NewResultModelZoneRecordWithDefaults instantiates a new ResultModelZoneRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelZoneRecordWithDefaults() *ResultModelZoneRecord {
	this := ResultModelZoneRecord{}
	return &this
}

// GetId returns the Id field value
func (o *ResultModelZoneRecord) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResultModelZoneRecord) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResultModelZoneRecord) SetId(v int32) {
	o.Id = v
}

// GetDomain returns the Domain field value
func (o *ResultModelZoneRecord) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ResultModelZoneRecord) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ResultModelZoneRecord) SetDomain(v string) {
	o.Domain = v
}

// GetHost returns the Host field value
func (o *ResultModelZoneRecord) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *ResultModelZoneRecord) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *ResultModelZoneRecord) SetHost(v string) {
	o.Host = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *ResultModelZoneRecord) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelZoneRecord) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *ResultModelZoneRecord) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *ResultModelZoneRecord) SetTtl(v int32) {
	o.Ttl = &v
}

// GetPrio returns the Prio field value if set, zero value otherwise.
func (o *ResultModelZoneRecord) GetPrio() int32 {
	if o == nil || IsNil(o.Prio) {
		var ret int32
		return ret
	}
	return *o.Prio
}

// GetPrioOk returns a tuple with the Prio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelZoneRecord) GetPrioOk() (*int32, bool) {
	if o == nil || IsNil(o.Prio) {
		return nil, false
	}
	return o.Prio, true
}

// HasPrio returns a boolean if a field has been set.
func (o *ResultModelZoneRecord) HasPrio() bool {
	if o != nil && !IsNil(o.Prio) {
		return true
	}

	return false
}

// SetPrio gets a reference to the given int32 and assigns it to the Prio field.
func (o *ResultModelZoneRecord) SetPrio(v int32) {
	o.Prio = &v
}

// GetGeozoneId returns the GeozoneId field value if set, zero value otherwise.
func (o *ResultModelZoneRecord) GetGeozoneId() int32 {
	if o == nil || IsNil(o.GeozoneId) {
		var ret int32
		return ret
	}
	return *o.GeozoneId
}

// GetGeozoneIdOk returns a tuple with the GeozoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelZoneRecord) GetGeozoneIdOk() (*int32, bool) {
	if o == nil || IsNil(o.GeozoneId) {
		return nil, false
	}
	return o.GeozoneId, true
}

// HasGeozoneId returns a boolean if a field has been set.
func (o *ResultModelZoneRecord) HasGeozoneId() bool {
	if o != nil && !IsNil(o.GeozoneId) {
		return true
	}

	return false
}

// SetGeozoneId gets a reference to the given int32 and assigns it to the GeozoneId field.
func (o *ResultModelZoneRecord) SetGeozoneId(v int32) {
	o.GeozoneId = &v
}

// GetType returns the Type field value
func (o *ResultModelZoneRecord) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResultModelZoneRecord) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResultModelZoneRecord) SetType(v string) {
	o.Type = v
}

// GetRdata returns the Rdata field value
func (o *ResultModelZoneRecord) GetRdata() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rdata
}

// GetRdataOk returns a tuple with the Rdata field value
// and a boolean to check if the value has been set.
func (o *ResultModelZoneRecord) GetRdataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rdata, true
}

// SetRdata sets field value
func (o *ResultModelZoneRecord) SetRdata(v string) {
	o.Rdata = v
}

// GetLastMod returns the LastMod field value if set, zero value otherwise.
func (o *ResultModelZoneRecord) GetLastMod() string {
	if o == nil || IsNil(o.LastMod) {
		var ret string
		return ret
	}
	return *o.LastMod
}

// GetLastModOk returns a tuple with the LastMod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelZoneRecord) GetLastModOk() (*string, bool) {
	if o == nil || IsNil(o.LastMod) {
		return nil, false
	}
	return o.LastMod, true
}

// HasLastMod returns a boolean if a field has been set.
func (o *ResultModelZoneRecord) HasLastMod() bool {
	if o != nil && !IsNil(o.LastMod) {
		return true
	}

	return false
}

// SetLastMod gets a reference to the given string and assigns it to the LastMod field.
func (o *ResultModelZoneRecord) SetLastMod(v string) {
	o.LastMod = &v
}

func (o ResultModelZoneRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelZoneRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["domain"] = o.Domain
	toSerialize["host"] = o.Host
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Prio) {
		toSerialize["prio"] = o.Prio
	}
	if !IsNil(o.GeozoneId) {
		toSerialize["geozone_id"] = o.GeozoneId
	}
	toSerialize["type"] = o.Type
	toSerialize["rdata"] = o.Rdata
	if !IsNil(o.LastMod) {
		toSerialize["last_mod"] = o.LastMod
	}
	return toSerialize, nil
}

func (o *ResultModelZoneRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"domain",
		"host",
		"type",
		"rdata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelZoneRecord := _ResultModelZoneRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelZoneRecord)

	if err != nil {
		return err
	}

	*o = ResultModelZoneRecord(varResultModelZoneRecord)

	return err
}

type NullableResultModelZoneRecord struct {
	value *ResultModelZoneRecord
	isSet bool
}

func (v NullableResultModelZoneRecord) Get() *ResultModelZoneRecord {
	return v.value
}

func (v *NullableResultModelZoneRecord) Set(val *ResultModelZoneRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelZoneRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelZoneRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelZoneRecord(val *ResultModelZoneRecord) *NullableResultModelZoneRecord {
	return &NullableResultModelZoneRecord{value: val, isSet: true}
}

func (v NullableResultModelZoneRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelZoneRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


