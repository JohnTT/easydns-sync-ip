/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegDataExtraIT type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegDataExtraIT{}

// RegDataExtraIT struct for RegDataExtraIT
type RegDataExtraIT struct {
	// Entity type
	EntityType int32 `json:"entity_type"`
	// Nationality code (2 letter ISO country code)
	NationalityCode string `json:"nationality_code"`
	// VAT or Codice Fiscale or n.a.
	RegCode string `json:"reg_code"`
}

type _RegDataExtraIT RegDataExtraIT

// NewRegDataExtraIT instantiates a new RegDataExtraIT object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegDataExtraIT(entityType int32, nationalityCode string, regCode string) *RegDataExtraIT {
	this := RegDataExtraIT{}
	this.EntityType = entityType
	this.NationalityCode = nationalityCode
	this.RegCode = regCode
	return &this
}

// NewRegDataExtraITWithDefaults instantiates a new RegDataExtraIT object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegDataExtraITWithDefaults() *RegDataExtraIT {
	this := RegDataExtraIT{}
	return &this
}

// GetEntityType returns the EntityType field value
func (o *RegDataExtraIT) GetEntityType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraIT) GetEntityTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *RegDataExtraIT) SetEntityType(v int32) {
	o.EntityType = v
}

// GetNationalityCode returns the NationalityCode field value
func (o *RegDataExtraIT) GetNationalityCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NationalityCode
}

// GetNationalityCodeOk returns a tuple with the NationalityCode field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraIT) GetNationalityCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NationalityCode, true
}

// SetNationalityCode sets field value
func (o *RegDataExtraIT) SetNationalityCode(v string) {
	o.NationalityCode = v
}

// GetRegCode returns the RegCode field value
func (o *RegDataExtraIT) GetRegCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegCode
}

// GetRegCodeOk returns a tuple with the RegCode field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraIT) GetRegCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegCode, true
}

// SetRegCode sets field value
func (o *RegDataExtraIT) SetRegCode(v string) {
	o.RegCode = v
}

func (o RegDataExtraIT) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegDataExtraIT) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entity_type"] = o.EntityType
	toSerialize["nationality_code"] = o.NationalityCode
	toSerialize["reg_code"] = o.RegCode
	return toSerialize, nil
}

func (o *RegDataExtraIT) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entity_type",
		"nationality_code",
		"reg_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegDataExtraIT := _RegDataExtraIT{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegDataExtraIT)

	if err != nil {
		return err
	}

	*o = RegDataExtraIT(varRegDataExtraIT)

	return err
}

type NullableRegDataExtraIT struct {
	value *RegDataExtraIT
	isSet bool
}

func (v NullableRegDataExtraIT) Get() *RegDataExtraIT {
	return v.value
}

func (v *NullableRegDataExtraIT) Set(val *RegDataExtraIT) {
	v.value = val
	v.isSet = true
}

func (v NullableRegDataExtraIT) IsSet() bool {
	return v.isSet
}

func (v *NullableRegDataExtraIT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegDataExtraIT(val *RegDataExtraIT) *NullableRegDataExtraIT {
	return &NullableRegDataExtraIT{value: val, isSet: true}
}

func (v NullableRegDataExtraIT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegDataExtraIT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


