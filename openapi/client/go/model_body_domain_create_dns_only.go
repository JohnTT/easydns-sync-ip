/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BodyDomainCreateDNSOnly type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodyDomainCreateDNSOnly{}

// BodyDomainCreateDNSOnly struct for BodyDomainCreateDNSOnly
type BodyDomainCreateDNSOnly struct {
	Service string `json:"service"`
	// The term (in years) to create the domain for. If domain is being registered this is also the term it will be registered for
	Term int32 `json:"term"`
	// The currency to use when processing billing for the new domain
	Currency string `json:"currency"`
	// Should this domain be added for DNS service only (excluding registration)? Requests that do not set this value will attempt registration of the provided domain name
	DnsOnly int32 `json:"dns_only"`
	// The nameservers to use when creating a domains NS records. If you are looking to set the primary NS for a secondary domain please use the primary_ns field
	Nameservers []string `json:"nameservers,omitempty"`
	// The name of the portfolio to automatically assign this domain to when domain is created. The portfolio provided MUST already exist and originate from the same user as the domain is being added to. *This parameter has been deprecated by the domain_group parameter.*
	// Deprecated
	Portfolio *string `json:"portfolio,omitempty"`
	// The name of the domain group to automatically assign this domain to when domain is created. The domain group provided MUST already exist and originate from the same user as the user who will control the domain
	DomainGroup *string `json:"domain_group,omitempty"`
	// The primary nameserver(s) to use when adding a new secondary domain to the system. Providing this value will cause the domain to be set to secondary automatically and the zone transfer process to start. Multiple masters should be separated by a semi-colon and no spaces (i.e. '1.2.3.4;5.6.7.8').
	PrimaryNs *string `json:"primary_ns,omitempty"`
}

type _BodyDomainCreateDNSOnly BodyDomainCreateDNSOnly

// NewBodyDomainCreateDNSOnly instantiates a new BodyDomainCreateDNSOnly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodyDomainCreateDNSOnly(service string, term int32, currency string, dnsOnly int32) *BodyDomainCreateDNSOnly {
	this := BodyDomainCreateDNSOnly{}
	this.Service = service
	this.Term = term
	this.Currency = currency
	this.DnsOnly = dnsOnly
	return &this
}

// NewBodyDomainCreateDNSOnlyWithDefaults instantiates a new BodyDomainCreateDNSOnly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyDomainCreateDNSOnlyWithDefaults() *BodyDomainCreateDNSOnly {
	this := BodyDomainCreateDNSOnly{}
	return &this
}

// GetService returns the Service field value
func (o *BodyDomainCreateDNSOnly) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDNSOnly) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *BodyDomainCreateDNSOnly) SetService(v string) {
	o.Service = v
}

// GetTerm returns the Term field value
func (o *BodyDomainCreateDNSOnly) GetTerm() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Term
}

// GetTermOk returns a tuple with the Term field value
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDNSOnly) GetTermOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Term, true
}

// SetTerm sets field value
func (o *BodyDomainCreateDNSOnly) SetTerm(v int32) {
	o.Term = v
}

// GetCurrency returns the Currency field value
func (o *BodyDomainCreateDNSOnly) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDNSOnly) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *BodyDomainCreateDNSOnly) SetCurrency(v string) {
	o.Currency = v
}

// GetDnsOnly returns the DnsOnly field value
func (o *BodyDomainCreateDNSOnly) GetDnsOnly() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DnsOnly
}

// GetDnsOnlyOk returns a tuple with the DnsOnly field value
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDNSOnly) GetDnsOnlyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsOnly, true
}

// SetDnsOnly sets field value
func (o *BodyDomainCreateDNSOnly) SetDnsOnly(v int32) {
	o.DnsOnly = v
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *BodyDomainCreateDNSOnly) GetNameservers() []string {
	if o == nil || IsNil(o.Nameservers) {
		var ret []string
		return ret
	}
	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDNSOnly) GetNameserversOk() ([]string, bool) {
	if o == nil || IsNil(o.Nameservers) {
		return nil, false
	}
	return o.Nameservers, true
}

// HasNameservers returns a boolean if a field has been set.
func (o *BodyDomainCreateDNSOnly) HasNameservers() bool {
	if o != nil && !IsNil(o.Nameservers) {
		return true
	}

	return false
}

// SetNameservers gets a reference to the given []string and assigns it to the Nameservers field.
func (o *BodyDomainCreateDNSOnly) SetNameservers(v []string) {
	o.Nameservers = v
}

// GetPortfolio returns the Portfolio field value if set, zero value otherwise.
// Deprecated
func (o *BodyDomainCreateDNSOnly) GetPortfolio() string {
	if o == nil || IsNil(o.Portfolio) {
		var ret string
		return ret
	}
	return *o.Portfolio
}

// GetPortfolioOk returns a tuple with the Portfolio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BodyDomainCreateDNSOnly) GetPortfolioOk() (*string, bool) {
	if o == nil || IsNil(o.Portfolio) {
		return nil, false
	}
	return o.Portfolio, true
}

// HasPortfolio returns a boolean if a field has been set.
func (o *BodyDomainCreateDNSOnly) HasPortfolio() bool {
	if o != nil && !IsNil(o.Portfolio) {
		return true
	}

	return false
}

// SetPortfolio gets a reference to the given string and assigns it to the Portfolio field.
// Deprecated
func (o *BodyDomainCreateDNSOnly) SetPortfolio(v string) {
	o.Portfolio = &v
}

// GetDomainGroup returns the DomainGroup field value if set, zero value otherwise.
func (o *BodyDomainCreateDNSOnly) GetDomainGroup() string {
	if o == nil || IsNil(o.DomainGroup) {
		var ret string
		return ret
	}
	return *o.DomainGroup
}

// GetDomainGroupOk returns a tuple with the DomainGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDNSOnly) GetDomainGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DomainGroup) {
		return nil, false
	}
	return o.DomainGroup, true
}

// HasDomainGroup returns a boolean if a field has been set.
func (o *BodyDomainCreateDNSOnly) HasDomainGroup() bool {
	if o != nil && !IsNil(o.DomainGroup) {
		return true
	}

	return false
}

// SetDomainGroup gets a reference to the given string and assigns it to the DomainGroup field.
func (o *BodyDomainCreateDNSOnly) SetDomainGroup(v string) {
	o.DomainGroup = &v
}

// GetPrimaryNs returns the PrimaryNs field value if set, zero value otherwise.
func (o *BodyDomainCreateDNSOnly) GetPrimaryNs() string {
	if o == nil || IsNil(o.PrimaryNs) {
		var ret string
		return ret
	}
	return *o.PrimaryNs
}

// GetPrimaryNsOk returns a tuple with the PrimaryNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDNSOnly) GetPrimaryNsOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryNs) {
		return nil, false
	}
	return o.PrimaryNs, true
}

// HasPrimaryNs returns a boolean if a field has been set.
func (o *BodyDomainCreateDNSOnly) HasPrimaryNs() bool {
	if o != nil && !IsNil(o.PrimaryNs) {
		return true
	}

	return false
}

// SetPrimaryNs gets a reference to the given string and assigns it to the PrimaryNs field.
func (o *BodyDomainCreateDNSOnly) SetPrimaryNs(v string) {
	o.PrimaryNs = &v
}

func (o BodyDomainCreateDNSOnly) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodyDomainCreateDNSOnly) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service"] = o.Service
	toSerialize["term"] = o.Term
	toSerialize["currency"] = o.Currency
	toSerialize["dns_only"] = o.DnsOnly
	if !IsNil(o.Nameservers) {
		toSerialize["nameservers"] = o.Nameservers
	}
	if !IsNil(o.Portfolio) {
		toSerialize["portfolio"] = o.Portfolio
	}
	if !IsNil(o.DomainGroup) {
		toSerialize["domain_group"] = o.DomainGroup
	}
	if !IsNil(o.PrimaryNs) {
		toSerialize["primary_ns"] = o.PrimaryNs
	}
	return toSerialize, nil
}

func (o *BodyDomainCreateDNSOnly) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service",
		"term",
		"currency",
		"dns_only",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBodyDomainCreateDNSOnly := _BodyDomainCreateDNSOnly{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBodyDomainCreateDNSOnly)

	if err != nil {
		return err
	}

	*o = BodyDomainCreateDNSOnly(varBodyDomainCreateDNSOnly)

	return err
}

type NullableBodyDomainCreateDNSOnly struct {
	value *BodyDomainCreateDNSOnly
	isSet bool
}

func (v NullableBodyDomainCreateDNSOnly) Get() *BodyDomainCreateDNSOnly {
	return v.value
}

func (v *NullableBodyDomainCreateDNSOnly) Set(val *BodyDomainCreateDNSOnly) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyDomainCreateDNSOnly) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyDomainCreateDNSOnly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyDomainCreateDNSOnly(val *BodyDomainCreateDNSOnly) *NullableBodyDomainCreateDNSOnly {
	return &NullableBodyDomainCreateDNSOnly{value: val, isSet: true}
}

func (v NullableBodyDomainCreateDNSOnly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyDomainCreateDNSOnly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


