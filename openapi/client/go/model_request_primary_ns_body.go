/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RequestPrimaryNSBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestPrimaryNSBody{}

// RequestPrimaryNSBody struct for RequestPrimaryNSBody
type RequestPrimaryNSBody struct {
	// Value to use as the primary NS or master for domain
	Master string `json:"master"`
}

type _RequestPrimaryNSBody RequestPrimaryNSBody

// NewRequestPrimaryNSBody instantiates a new RequestPrimaryNSBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestPrimaryNSBody(master string) *RequestPrimaryNSBody {
	this := RequestPrimaryNSBody{}
	this.Master = master
	return &this
}

// NewRequestPrimaryNSBodyWithDefaults instantiates a new RequestPrimaryNSBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestPrimaryNSBodyWithDefaults() *RequestPrimaryNSBody {
	this := RequestPrimaryNSBody{}
	return &this
}

// GetMaster returns the Master field value
func (o *RequestPrimaryNSBody) GetMaster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Master
}

// GetMasterOk returns a tuple with the Master field value
// and a boolean to check if the value has been set.
func (o *RequestPrimaryNSBody) GetMasterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Master, true
}

// SetMaster sets field value
func (o *RequestPrimaryNSBody) SetMaster(v string) {
	o.Master = v
}

func (o RequestPrimaryNSBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestPrimaryNSBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["master"] = o.Master
	return toSerialize, nil
}

func (o *RequestPrimaryNSBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"master",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestPrimaryNSBody := _RequestPrimaryNSBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestPrimaryNSBody)

	if err != nil {
		return err
	}

	*o = RequestPrimaryNSBody(varRequestPrimaryNSBody)

	return err
}

type NullableRequestPrimaryNSBody struct {
	value *RequestPrimaryNSBody
	isSet bool
}

func (v NullableRequestPrimaryNSBody) Get() *RequestPrimaryNSBody {
	return v.value
}

func (v *NullableRequestPrimaryNSBody) Set(val *RequestPrimaryNSBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestPrimaryNSBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestPrimaryNSBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestPrimaryNSBody(val *RequestPrimaryNSBody) *NullableRequestPrimaryNSBody {
	return &NullableRequestPrimaryNSBody{value: val, isSet: true}
}

func (v NullableRequestPrimaryNSBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestPrimaryNSBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


