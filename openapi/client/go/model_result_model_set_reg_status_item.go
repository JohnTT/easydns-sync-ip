/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelSetRegStatusItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelSetRegStatusItem{}

// ResultModelSetRegStatusItem struct for ResultModelSetRegStatusItem
type ResultModelSetRegStatusItem struct {
	// The domain to change the regstatus on
	Domain string `json:"domain"`
	// (OPTIONAL) The reglock setting provided by the user
	Reglock *bool `json:"reglock,omitempty"`
	// (OPTIONAL) The renew setting provided by the caller
	Renewal *string `json:"renewal,omitempty"`
	// (OPTIONAL) Set to true if a lock change was attempted
	ChangeLock *bool `json:"change_lock,omitempty"`
	// (OPTIONAL) Set to true if a lock change was attempted but failed
	ChangeLockFailed *bool `json:"change_lock_failed,omitempty"`
	// (OPTIONAL) Set to true if a renewal action change was attempted
	ChangeRenew *bool `json:"change_renew,omitempty"`
	// (OPTIONAL) Set to true if a renewal action change was attempted but failed
	ChangeRenewFailed *bool `json:"change_renew_failed,omitempty"`
	// (OPTIONAL) Set to true if a let_expire change was attempted
	ChangeLetExpire *bool `json:"change_let_expire,omitempty"`
	// (OPTIONAL) Set to true if a let_expire change was attempted but failed
	ChangeLetExpireFailed *bool `json:"change_let_expire_failed,omitempty"`
	// (OPTIONAL) Attempts to connect to the registry for this domain failed
	ConnectFailed *bool `json:"connect_failed,omitempty"`
	// (OPTIONAL) Based on the domain provided the renewal action change was invalid. For example trying to set a .CA domain to expire
	InvalidRenewalState *bool `json:"invalid_renewal_state,omitempty"`
}

type _ResultModelSetRegStatusItem ResultModelSetRegStatusItem

// NewResultModelSetRegStatusItem instantiates a new ResultModelSetRegStatusItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelSetRegStatusItem(domain string) *ResultModelSetRegStatusItem {
	this := ResultModelSetRegStatusItem{}
	this.Domain = domain
	return &this
}

// NewResultModelSetRegStatusItemWithDefaults instantiates a new ResultModelSetRegStatusItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelSetRegStatusItemWithDefaults() *ResultModelSetRegStatusItem {
	this := ResultModelSetRegStatusItem{}
	return &this
}

// GetDomain returns the Domain field value
func (o *ResultModelSetRegStatusItem) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ResultModelSetRegStatusItem) SetDomain(v string) {
	o.Domain = v
}

// GetReglock returns the Reglock field value if set, zero value otherwise.
func (o *ResultModelSetRegStatusItem) GetReglock() bool {
	if o == nil || IsNil(o.Reglock) {
		var ret bool
		return ret
	}
	return *o.Reglock
}

// GetReglockOk returns a tuple with the Reglock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetReglockOk() (*bool, bool) {
	if o == nil || IsNil(o.Reglock) {
		return nil, false
	}
	return o.Reglock, true
}

// HasReglock returns a boolean if a field has been set.
func (o *ResultModelSetRegStatusItem) HasReglock() bool {
	if o != nil && !IsNil(o.Reglock) {
		return true
	}

	return false
}

// SetReglock gets a reference to the given bool and assigns it to the Reglock field.
func (o *ResultModelSetRegStatusItem) SetReglock(v bool) {
	o.Reglock = &v
}

// GetRenewal returns the Renewal field value if set, zero value otherwise.
func (o *ResultModelSetRegStatusItem) GetRenewal() string {
	if o == nil || IsNil(o.Renewal) {
		var ret string
		return ret
	}
	return *o.Renewal
}

// GetRenewalOk returns a tuple with the Renewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetRenewalOk() (*string, bool) {
	if o == nil || IsNil(o.Renewal) {
		return nil, false
	}
	return o.Renewal, true
}

// HasRenewal returns a boolean if a field has been set.
func (o *ResultModelSetRegStatusItem) HasRenewal() bool {
	if o != nil && !IsNil(o.Renewal) {
		return true
	}

	return false
}

// SetRenewal gets a reference to the given string and assigns it to the Renewal field.
func (o *ResultModelSetRegStatusItem) SetRenewal(v string) {
	o.Renewal = &v
}

// GetChangeLock returns the ChangeLock field value if set, zero value otherwise.
func (o *ResultModelSetRegStatusItem) GetChangeLock() bool {
	if o == nil || IsNil(o.ChangeLock) {
		var ret bool
		return ret
	}
	return *o.ChangeLock
}

// GetChangeLockOk returns a tuple with the ChangeLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetChangeLockOk() (*bool, bool) {
	if o == nil || IsNil(o.ChangeLock) {
		return nil, false
	}
	return o.ChangeLock, true
}

// HasChangeLock returns a boolean if a field has been set.
func (o *ResultModelSetRegStatusItem) HasChangeLock() bool {
	if o != nil && !IsNil(o.ChangeLock) {
		return true
	}

	return false
}

// SetChangeLock gets a reference to the given bool and assigns it to the ChangeLock field.
func (o *ResultModelSetRegStatusItem) SetChangeLock(v bool) {
	o.ChangeLock = &v
}

// GetChangeLockFailed returns the ChangeLockFailed field value if set, zero value otherwise.
func (o *ResultModelSetRegStatusItem) GetChangeLockFailed() bool {
	if o == nil || IsNil(o.ChangeLockFailed) {
		var ret bool
		return ret
	}
	return *o.ChangeLockFailed
}

// GetChangeLockFailedOk returns a tuple with the ChangeLockFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetChangeLockFailedOk() (*bool, bool) {
	if o == nil || IsNil(o.ChangeLockFailed) {
		return nil, false
	}
	return o.ChangeLockFailed, true
}

// HasChangeLockFailed returns a boolean if a field has been set.
func (o *ResultModelSetRegStatusItem) HasChangeLockFailed() bool {
	if o != nil && !IsNil(o.ChangeLockFailed) {
		return true
	}

	return false
}

// SetChangeLockFailed gets a reference to the given bool and assigns it to the ChangeLockFailed field.
func (o *ResultModelSetRegStatusItem) SetChangeLockFailed(v bool) {
	o.ChangeLockFailed = &v
}

// GetChangeRenew returns the ChangeRenew field value if set, zero value otherwise.
func (o *ResultModelSetRegStatusItem) GetChangeRenew() bool {
	if o == nil || IsNil(o.ChangeRenew) {
		var ret bool
		return ret
	}
	return *o.ChangeRenew
}

// GetChangeRenewOk returns a tuple with the ChangeRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetChangeRenewOk() (*bool, bool) {
	if o == nil || IsNil(o.ChangeRenew) {
		return nil, false
	}
	return o.ChangeRenew, true
}

// HasChangeRenew returns a boolean if a field has been set.
func (o *ResultModelSetRegStatusItem) HasChangeRenew() bool {
	if o != nil && !IsNil(o.ChangeRenew) {
		return true
	}

	return false
}

// SetChangeRenew gets a reference to the given bool and assigns it to the ChangeRenew field.
func (o *ResultModelSetRegStatusItem) SetChangeRenew(v bool) {
	o.ChangeRenew = &v
}

// GetChangeRenewFailed returns the ChangeRenewFailed field value if set, zero value otherwise.
func (o *ResultModelSetRegStatusItem) GetChangeRenewFailed() bool {
	if o == nil || IsNil(o.ChangeRenewFailed) {
		var ret bool
		return ret
	}
	return *o.ChangeRenewFailed
}

// GetChangeRenewFailedOk returns a tuple with the ChangeRenewFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetChangeRenewFailedOk() (*bool, bool) {
	if o == nil || IsNil(o.ChangeRenewFailed) {
		return nil, false
	}
	return o.ChangeRenewFailed, true
}

// HasChangeRenewFailed returns a boolean if a field has been set.
func (o *ResultModelSetRegStatusItem) HasChangeRenewFailed() bool {
	if o != nil && !IsNil(o.ChangeRenewFailed) {
		return true
	}

	return false
}

// SetChangeRenewFailed gets a reference to the given bool and assigns it to the ChangeRenewFailed field.
func (o *ResultModelSetRegStatusItem) SetChangeRenewFailed(v bool) {
	o.ChangeRenewFailed = &v
}

// GetChangeLetExpire returns the ChangeLetExpire field value if set, zero value otherwise.
func (o *ResultModelSetRegStatusItem) GetChangeLetExpire() bool {
	if o == nil || IsNil(o.ChangeLetExpire) {
		var ret bool
		return ret
	}
	return *o.ChangeLetExpire
}

// GetChangeLetExpireOk returns a tuple with the ChangeLetExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetChangeLetExpireOk() (*bool, bool) {
	if o == nil || IsNil(o.ChangeLetExpire) {
		return nil, false
	}
	return o.ChangeLetExpire, true
}

// HasChangeLetExpire returns a boolean if a field has been set.
func (o *ResultModelSetRegStatusItem) HasChangeLetExpire() bool {
	if o != nil && !IsNil(o.ChangeLetExpire) {
		return true
	}

	return false
}

// SetChangeLetExpire gets a reference to the given bool and assigns it to the ChangeLetExpire field.
func (o *ResultModelSetRegStatusItem) SetChangeLetExpire(v bool) {
	o.ChangeLetExpire = &v
}

// GetChangeLetExpireFailed returns the ChangeLetExpireFailed field value if set, zero value otherwise.
func (o *ResultModelSetRegStatusItem) GetChangeLetExpireFailed() bool {
	if o == nil || IsNil(o.ChangeLetExpireFailed) {
		var ret bool
		return ret
	}
	return *o.ChangeLetExpireFailed
}

// GetChangeLetExpireFailedOk returns a tuple with the ChangeLetExpireFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetChangeLetExpireFailedOk() (*bool, bool) {
	if o == nil || IsNil(o.ChangeLetExpireFailed) {
		return nil, false
	}
	return o.ChangeLetExpireFailed, true
}

// HasChangeLetExpireFailed returns a boolean if a field has been set.
func (o *ResultModelSetRegStatusItem) HasChangeLetExpireFailed() bool {
	if o != nil && !IsNil(o.ChangeLetExpireFailed) {
		return true
	}

	return false
}

// SetChangeLetExpireFailed gets a reference to the given bool and assigns it to the ChangeLetExpireFailed field.
func (o *ResultModelSetRegStatusItem) SetChangeLetExpireFailed(v bool) {
	o.ChangeLetExpireFailed = &v
}

// GetConnectFailed returns the ConnectFailed field value if set, zero value otherwise.
func (o *ResultModelSetRegStatusItem) GetConnectFailed() bool {
	if o == nil || IsNil(o.ConnectFailed) {
		var ret bool
		return ret
	}
	return *o.ConnectFailed
}

// GetConnectFailedOk returns a tuple with the ConnectFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetConnectFailedOk() (*bool, bool) {
	if o == nil || IsNil(o.ConnectFailed) {
		return nil, false
	}
	return o.ConnectFailed, true
}

// HasConnectFailed returns a boolean if a field has been set.
func (o *ResultModelSetRegStatusItem) HasConnectFailed() bool {
	if o != nil && !IsNil(o.ConnectFailed) {
		return true
	}

	return false
}

// SetConnectFailed gets a reference to the given bool and assigns it to the ConnectFailed field.
func (o *ResultModelSetRegStatusItem) SetConnectFailed(v bool) {
	o.ConnectFailed = &v
}

// GetInvalidRenewalState returns the InvalidRenewalState field value if set, zero value otherwise.
func (o *ResultModelSetRegStatusItem) GetInvalidRenewalState() bool {
	if o == nil || IsNil(o.InvalidRenewalState) {
		var ret bool
		return ret
	}
	return *o.InvalidRenewalState
}

// GetInvalidRenewalStateOk returns a tuple with the InvalidRenewalState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelSetRegStatusItem) GetInvalidRenewalStateOk() (*bool, bool) {
	if o == nil || IsNil(o.InvalidRenewalState) {
		return nil, false
	}
	return o.InvalidRenewalState, true
}

// HasInvalidRenewalState returns a boolean if a field has been set.
func (o *ResultModelSetRegStatusItem) HasInvalidRenewalState() bool {
	if o != nil && !IsNil(o.InvalidRenewalState) {
		return true
	}

	return false
}

// SetInvalidRenewalState gets a reference to the given bool and assigns it to the InvalidRenewalState field.
func (o *ResultModelSetRegStatusItem) SetInvalidRenewalState(v bool) {
	o.InvalidRenewalState = &v
}

func (o ResultModelSetRegStatusItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelSetRegStatusItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	if !IsNil(o.Reglock) {
		toSerialize["reglock"] = o.Reglock
	}
	if !IsNil(o.Renewal) {
		toSerialize["renewal"] = o.Renewal
	}
	if !IsNil(o.ChangeLock) {
		toSerialize["change_lock"] = o.ChangeLock
	}
	if !IsNil(o.ChangeLockFailed) {
		toSerialize["change_lock_failed"] = o.ChangeLockFailed
	}
	if !IsNil(o.ChangeRenew) {
		toSerialize["change_renew"] = o.ChangeRenew
	}
	if !IsNil(o.ChangeRenewFailed) {
		toSerialize["change_renew_failed"] = o.ChangeRenewFailed
	}
	if !IsNil(o.ChangeLetExpire) {
		toSerialize["change_let_expire"] = o.ChangeLetExpire
	}
	if !IsNil(o.ChangeLetExpireFailed) {
		toSerialize["change_let_expire_failed"] = o.ChangeLetExpireFailed
	}
	if !IsNil(o.ConnectFailed) {
		toSerialize["connect_failed"] = o.ConnectFailed
	}
	if !IsNil(o.InvalidRenewalState) {
		toSerialize["invalid_renewal_state"] = o.InvalidRenewalState
	}
	return toSerialize, nil
}

func (o *ResultModelSetRegStatusItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelSetRegStatusItem := _ResultModelSetRegStatusItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelSetRegStatusItem)

	if err != nil {
		return err
	}

	*o = ResultModelSetRegStatusItem(varResultModelSetRegStatusItem)

	return err
}

type NullableResultModelSetRegStatusItem struct {
	value *ResultModelSetRegStatusItem
	isSet bool
}

func (v NullableResultModelSetRegStatusItem) Get() *ResultModelSetRegStatusItem {
	return v.value
}

func (v *NullableResultModelSetRegStatusItem) Set(val *ResultModelSetRegStatusItem) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelSetRegStatusItem) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelSetRegStatusItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelSetRegStatusItem(val *ResultModelSetRegStatusItem) *NullableResultModelSetRegStatusItem {
	return &NullableResultModelSetRegStatusItem{value: val, isSet: true}
}

func (v NullableResultModelSetRegStatusItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelSetRegStatusItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


