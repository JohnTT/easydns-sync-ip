/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateDomainRequest - struct for CreateDomainRequest
type CreateDomainRequest struct {
	BodyDomainCreateDNSOnly *BodyDomainCreateDNSOnly
	BodyDomainCreateDefault *BodyDomainCreateDefault
}

// BodyDomainCreateDNSOnlyAsCreateDomainRequest is a convenience function that returns BodyDomainCreateDNSOnly wrapped in CreateDomainRequest
func BodyDomainCreateDNSOnlyAsCreateDomainRequest(v *BodyDomainCreateDNSOnly) CreateDomainRequest {
	return CreateDomainRequest{
		BodyDomainCreateDNSOnly: v,
	}
}

// BodyDomainCreateDefaultAsCreateDomainRequest is a convenience function that returns BodyDomainCreateDefault wrapped in CreateDomainRequest
func BodyDomainCreateDefaultAsCreateDomainRequest(v *BodyDomainCreateDefault) CreateDomainRequest {
	return CreateDomainRequest{
		BodyDomainCreateDefault: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateDomainRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BodyDomainCreateDNSOnly
	err = newStrictDecoder(data).Decode(&dst.BodyDomainCreateDNSOnly)
	if err == nil {
		jsonBodyDomainCreateDNSOnly, _ := json.Marshal(dst.BodyDomainCreateDNSOnly)
		if string(jsonBodyDomainCreateDNSOnly) == "{}" { // empty struct
			dst.BodyDomainCreateDNSOnly = nil
		} else {
			if err = validator.Validate(dst.BodyDomainCreateDNSOnly); err != nil {
				dst.BodyDomainCreateDNSOnly = nil
			} else {
				match++
			}
		}
	} else {
		dst.BodyDomainCreateDNSOnly = nil
	}

	// try to unmarshal data into BodyDomainCreateDefault
	err = newStrictDecoder(data).Decode(&dst.BodyDomainCreateDefault)
	if err == nil {
		jsonBodyDomainCreateDefault, _ := json.Marshal(dst.BodyDomainCreateDefault)
		if string(jsonBodyDomainCreateDefault) == "{}" { // empty struct
			dst.BodyDomainCreateDefault = nil
		} else {
			if err = validator.Validate(dst.BodyDomainCreateDefault); err != nil {
				dst.BodyDomainCreateDefault = nil
			} else {
				match++
			}
		}
	} else {
		dst.BodyDomainCreateDefault = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BodyDomainCreateDNSOnly = nil
		dst.BodyDomainCreateDefault = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateDomainRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateDomainRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateDomainRequest) MarshalJSON() ([]byte, error) {
	if src.BodyDomainCreateDNSOnly != nil {
		return json.Marshal(&src.BodyDomainCreateDNSOnly)
	}

	if src.BodyDomainCreateDefault != nil {
		return json.Marshal(&src.BodyDomainCreateDefault)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateDomainRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BodyDomainCreateDNSOnly != nil {
		return obj.BodyDomainCreateDNSOnly
	}

	if obj.BodyDomainCreateDefault != nil {
		return obj.BodyDomainCreateDefault
	}

	// all schemas are nil
	return nil
}

type NullableCreateDomainRequest struct {
	value *CreateDomainRequest
	isSet bool
}

func (v NullableCreateDomainRequest) Get() *CreateDomainRequest {
	return v.value
}

func (v *NullableCreateDomainRequest) Set(val *CreateDomainRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDomainRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDomainRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDomainRequest(val *CreateDomainRequest) *NullableCreateDomainRequest {
	return &NullableCreateDomainRequest{value: val, isSet: true}
}

func (v NullableCreateDomainRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDomainRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


