/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelCreateUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelCreateUser{}

// ResultModelCreateUser struct for ResultModelCreateUser
type ResultModelCreateUser struct {
	// Result message of request
	Msg string `json:"msg"`
	Data *ResultModelCreateUserData `json:"data,omitempty"`
	// HTTP status code of result
	Status int32 `json:"status"`
}

type _ResultModelCreateUser ResultModelCreateUser

// NewResultModelCreateUser instantiates a new ResultModelCreateUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelCreateUser(msg string, status int32) *ResultModelCreateUser {
	this := ResultModelCreateUser{}
	this.Msg = msg
	this.Status = status
	return &this
}

// NewResultModelCreateUserWithDefaults instantiates a new ResultModelCreateUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelCreateUserWithDefaults() *ResultModelCreateUser {
	this := ResultModelCreateUser{}
	var status int32 = 201
	this.Status = status
	return &this
}

// GetMsg returns the Msg field value
func (o *ResultModelCreateUser) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUser) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *ResultModelCreateUser) SetMsg(v string) {
	o.Msg = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ResultModelCreateUser) GetData() ResultModelCreateUserData {
	if o == nil || IsNil(o.Data) {
		var ret ResultModelCreateUserData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUser) GetDataOk() (*ResultModelCreateUserData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ResultModelCreateUser) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ResultModelCreateUserData and assigns it to the Data field.
func (o *ResultModelCreateUser) SetData(v ResultModelCreateUserData) {
	o.Data = &v
}

// GetStatus returns the Status field value
func (o *ResultModelCreateUser) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ResultModelCreateUser) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ResultModelCreateUser) SetStatus(v int32) {
	o.Status = v
}

func (o ResultModelCreateUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelCreateUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["msg"] = o.Msg
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ResultModelCreateUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"msg",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelCreateUser := _ResultModelCreateUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelCreateUser)

	if err != nil {
		return err
	}

	*o = ResultModelCreateUser(varResultModelCreateUser)

	return err
}

type NullableResultModelCreateUser struct {
	value *ResultModelCreateUser
	isSet bool
}

func (v NullableResultModelCreateUser) Get() *ResultModelCreateUser {
	return v.value
}

func (v *NullableResultModelCreateUser) Set(val *ResultModelCreateUser) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelCreateUser) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelCreateUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelCreateUser(val *ResultModelCreateUser) *NullableResultModelCreateUser {
	return &NullableResultModelCreateUser{value: val, isSet: true}
}

func (v NullableResultModelCreateUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelCreateUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


