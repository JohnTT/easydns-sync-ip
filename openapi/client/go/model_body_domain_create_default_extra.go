/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BodyDomainCreateDefaultExtra struct for BodyDomainCreateDefaultExtra
type BodyDomainCreateDefaultExtra struct {
	RegDataExtraBR *RegDataExtraBR
	RegDataExtraCAT *RegDataExtraCAT
	RegDataExtraFR *RegDataExtraFR
	RegDataExtraIT *RegDataExtraIT
	RegDataExtraLAW *RegDataExtraLAW
	RegDataExtraNU *RegDataExtraNU
	RegDataExtraPARIS *RegDataExtraPARIS
	RegDataExtraSE *RegDataExtraSE
	RegDataExtraSG *RegDataExtraSG
	RegDataExtraSX *RegDataExtraSX
	RegDataExtraUS *RegDataExtraUS
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *BodyDomainCreateDefaultExtra) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into RegDataExtraBR
	err = json.Unmarshal(data, &dst.RegDataExtraBR);
	if err == nil {
		jsonRegDataExtraBR, _ := json.Marshal(dst.RegDataExtraBR)
		if string(jsonRegDataExtraBR) == "{}" { // empty struct
			dst.RegDataExtraBR = nil
		} else {
			return nil // data stored in dst.RegDataExtraBR, return on the first match
		}
	} else {
		dst.RegDataExtraBR = nil
	}

	// try to unmarshal JSON data into RegDataExtraCAT
	err = json.Unmarshal(data, &dst.RegDataExtraCAT);
	if err == nil {
		jsonRegDataExtraCAT, _ := json.Marshal(dst.RegDataExtraCAT)
		if string(jsonRegDataExtraCAT) == "{}" { // empty struct
			dst.RegDataExtraCAT = nil
		} else {
			return nil // data stored in dst.RegDataExtraCAT, return on the first match
		}
	} else {
		dst.RegDataExtraCAT = nil
	}

	// try to unmarshal JSON data into RegDataExtraFR
	err = json.Unmarshal(data, &dst.RegDataExtraFR);
	if err == nil {
		jsonRegDataExtraFR, _ := json.Marshal(dst.RegDataExtraFR)
		if string(jsonRegDataExtraFR) == "{}" { // empty struct
			dst.RegDataExtraFR = nil
		} else {
			return nil // data stored in dst.RegDataExtraFR, return on the first match
		}
	} else {
		dst.RegDataExtraFR = nil
	}

	// try to unmarshal JSON data into RegDataExtraIT
	err = json.Unmarshal(data, &dst.RegDataExtraIT);
	if err == nil {
		jsonRegDataExtraIT, _ := json.Marshal(dst.RegDataExtraIT)
		if string(jsonRegDataExtraIT) == "{}" { // empty struct
			dst.RegDataExtraIT = nil
		} else {
			return nil // data stored in dst.RegDataExtraIT, return on the first match
		}
	} else {
		dst.RegDataExtraIT = nil
	}

	// try to unmarshal JSON data into RegDataExtraLAW
	err = json.Unmarshal(data, &dst.RegDataExtraLAW);
	if err == nil {
		jsonRegDataExtraLAW, _ := json.Marshal(dst.RegDataExtraLAW)
		if string(jsonRegDataExtraLAW) == "{}" { // empty struct
			dst.RegDataExtraLAW = nil
		} else {
			return nil // data stored in dst.RegDataExtraLAW, return on the first match
		}
	} else {
		dst.RegDataExtraLAW = nil
	}

	// try to unmarshal JSON data into RegDataExtraNU
	err = json.Unmarshal(data, &dst.RegDataExtraNU);
	if err == nil {
		jsonRegDataExtraNU, _ := json.Marshal(dst.RegDataExtraNU)
		if string(jsonRegDataExtraNU) == "{}" { // empty struct
			dst.RegDataExtraNU = nil
		} else {
			return nil // data stored in dst.RegDataExtraNU, return on the first match
		}
	} else {
		dst.RegDataExtraNU = nil
	}

	// try to unmarshal JSON data into RegDataExtraPARIS
	err = json.Unmarshal(data, &dst.RegDataExtraPARIS);
	if err == nil {
		jsonRegDataExtraPARIS, _ := json.Marshal(dst.RegDataExtraPARIS)
		if string(jsonRegDataExtraPARIS) == "{}" { // empty struct
			dst.RegDataExtraPARIS = nil
		} else {
			return nil // data stored in dst.RegDataExtraPARIS, return on the first match
		}
	} else {
		dst.RegDataExtraPARIS = nil
	}

	// try to unmarshal JSON data into RegDataExtraSE
	err = json.Unmarshal(data, &dst.RegDataExtraSE);
	if err == nil {
		jsonRegDataExtraSE, _ := json.Marshal(dst.RegDataExtraSE)
		if string(jsonRegDataExtraSE) == "{}" { // empty struct
			dst.RegDataExtraSE = nil
		} else {
			return nil // data stored in dst.RegDataExtraSE, return on the first match
		}
	} else {
		dst.RegDataExtraSE = nil
	}

	// try to unmarshal JSON data into RegDataExtraSG
	err = json.Unmarshal(data, &dst.RegDataExtraSG);
	if err == nil {
		jsonRegDataExtraSG, _ := json.Marshal(dst.RegDataExtraSG)
		if string(jsonRegDataExtraSG) == "{}" { // empty struct
			dst.RegDataExtraSG = nil
		} else {
			return nil // data stored in dst.RegDataExtraSG, return on the first match
		}
	} else {
		dst.RegDataExtraSG = nil
	}

	// try to unmarshal JSON data into RegDataExtraSX
	err = json.Unmarshal(data, &dst.RegDataExtraSX);
	if err == nil {
		jsonRegDataExtraSX, _ := json.Marshal(dst.RegDataExtraSX)
		if string(jsonRegDataExtraSX) == "{}" { // empty struct
			dst.RegDataExtraSX = nil
		} else {
			return nil // data stored in dst.RegDataExtraSX, return on the first match
		}
	} else {
		dst.RegDataExtraSX = nil
	}

	// try to unmarshal JSON data into RegDataExtraUS
	err = json.Unmarshal(data, &dst.RegDataExtraUS);
	if err == nil {
		jsonRegDataExtraUS, _ := json.Marshal(dst.RegDataExtraUS)
		if string(jsonRegDataExtraUS) == "{}" { // empty struct
			dst.RegDataExtraUS = nil
		} else {
			return nil // data stored in dst.RegDataExtraUS, return on the first match
		}
	} else {
		dst.RegDataExtraUS = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(BodyDomainCreateDefaultExtra)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *BodyDomainCreateDefaultExtra) MarshalJSON() ([]byte, error) {
	if src.RegDataExtraBR != nil {
		return json.Marshal(&src.RegDataExtraBR)
	}

	if src.RegDataExtraCAT != nil {
		return json.Marshal(&src.RegDataExtraCAT)
	}

	if src.RegDataExtraFR != nil {
		return json.Marshal(&src.RegDataExtraFR)
	}

	if src.RegDataExtraIT != nil {
		return json.Marshal(&src.RegDataExtraIT)
	}

	if src.RegDataExtraLAW != nil {
		return json.Marshal(&src.RegDataExtraLAW)
	}

	if src.RegDataExtraNU != nil {
		return json.Marshal(&src.RegDataExtraNU)
	}

	if src.RegDataExtraPARIS != nil {
		return json.Marshal(&src.RegDataExtraPARIS)
	}

	if src.RegDataExtraSE != nil {
		return json.Marshal(&src.RegDataExtraSE)
	}

	if src.RegDataExtraSG != nil {
		return json.Marshal(&src.RegDataExtraSG)
	}

	if src.RegDataExtraSX != nil {
		return json.Marshal(&src.RegDataExtraSX)
	}

	if src.RegDataExtraUS != nil {
		return json.Marshal(&src.RegDataExtraUS)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableBodyDomainCreateDefaultExtra struct {
	value *BodyDomainCreateDefaultExtra
	isSet bool
}

func (v NullableBodyDomainCreateDefaultExtra) Get() *BodyDomainCreateDefaultExtra {
	return v.value
}

func (v *NullableBodyDomainCreateDefaultExtra) Set(val *BodyDomainCreateDefaultExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyDomainCreateDefaultExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyDomainCreateDefaultExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyDomainCreateDefaultExtra(val *BodyDomainCreateDefaultExtra) *NullableBodyDomainCreateDefaultExtra {
	return &NullableBodyDomainCreateDefaultExtra{value: val, isSet: true}
}

func (v NullableBodyDomainCreateDefaultExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyDomainCreateDefaultExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


