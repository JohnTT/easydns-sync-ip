/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContactDataSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactDataSet{}

// ContactDataSet struct for ContactDataSet
type ContactDataSet struct {
	Owner ContactDataOwner `json:"owner"`
	Admin *ContactDataAdmin `json:"admin,omitempty"`
	Tech *ContactDataTech `json:"tech,omitempty"`
	Billing *ContactDataBilling `json:"billing,omitempty"`
}

type _ContactDataSet ContactDataSet

// NewContactDataSet instantiates a new ContactDataSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactDataSet(owner ContactDataOwner) *ContactDataSet {
	this := ContactDataSet{}
	this.Owner = owner
	return &this
}

// NewContactDataSetWithDefaults instantiates a new ContactDataSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactDataSetWithDefaults() *ContactDataSet {
	this := ContactDataSet{}
	return &this
}

// GetOwner returns the Owner field value
func (o *ContactDataSet) GetOwner() ContactDataOwner {
	if o == nil {
		var ret ContactDataOwner
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *ContactDataSet) GetOwnerOk() (*ContactDataOwner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *ContactDataSet) SetOwner(v ContactDataOwner) {
	o.Owner = v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *ContactDataSet) GetAdmin() ContactDataAdmin {
	if o == nil || IsNil(o.Admin) {
		var ret ContactDataAdmin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactDataSet) GetAdminOk() (*ContactDataAdmin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *ContactDataSet) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given ContactDataAdmin and assigns it to the Admin field.
func (o *ContactDataSet) SetAdmin(v ContactDataAdmin) {
	o.Admin = &v
}

// GetTech returns the Tech field value if set, zero value otherwise.
func (o *ContactDataSet) GetTech() ContactDataTech {
	if o == nil || IsNil(o.Tech) {
		var ret ContactDataTech
		return ret
	}
	return *o.Tech
}

// GetTechOk returns a tuple with the Tech field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactDataSet) GetTechOk() (*ContactDataTech, bool) {
	if o == nil || IsNil(o.Tech) {
		return nil, false
	}
	return o.Tech, true
}

// HasTech returns a boolean if a field has been set.
func (o *ContactDataSet) HasTech() bool {
	if o != nil && !IsNil(o.Tech) {
		return true
	}

	return false
}

// SetTech gets a reference to the given ContactDataTech and assigns it to the Tech field.
func (o *ContactDataSet) SetTech(v ContactDataTech) {
	o.Tech = &v
}

// GetBilling returns the Billing field value if set, zero value otherwise.
func (o *ContactDataSet) GetBilling() ContactDataBilling {
	if o == nil || IsNil(o.Billing) {
		var ret ContactDataBilling
		return ret
	}
	return *o.Billing
}

// GetBillingOk returns a tuple with the Billing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactDataSet) GetBillingOk() (*ContactDataBilling, bool) {
	if o == nil || IsNil(o.Billing) {
		return nil, false
	}
	return o.Billing, true
}

// HasBilling returns a boolean if a field has been set.
func (o *ContactDataSet) HasBilling() bool {
	if o != nil && !IsNil(o.Billing) {
		return true
	}

	return false
}

// SetBilling gets a reference to the given ContactDataBilling and assigns it to the Billing field.
func (o *ContactDataSet) SetBilling(v ContactDataBilling) {
	o.Billing = &v
}

func (o ContactDataSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactDataSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["owner"] = o.Owner
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	if !IsNil(o.Tech) {
		toSerialize["tech"] = o.Tech
	}
	if !IsNil(o.Billing) {
		toSerialize["billing"] = o.Billing
	}
	return toSerialize, nil
}

func (o *ContactDataSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"owner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactDataSet := _ContactDataSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactDataSet)

	if err != nil {
		return err
	}

	*o = ContactDataSet(varContactDataSet)

	return err
}

type NullableContactDataSet struct {
	value *ContactDataSet
	isSet bool
}

func (v NullableContactDataSet) Get() *ContactDataSet {
	return v.value
}

func (v *NullableContactDataSet) Set(val *ContactDataSet) {
	v.value = val
	v.isSet = true
}

func (v NullableContactDataSet) IsSet() bool {
	return v.isSet
}

func (v *NullableContactDataSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactDataSet(val *ContactDataSet) *NullableContactDataSet {
	return &NullableContactDataSet{value: val, isSet: true}
}

func (v NullableContactDataSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactDataSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


