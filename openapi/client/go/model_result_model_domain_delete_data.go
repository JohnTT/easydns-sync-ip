/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelDomainDeleteData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelDomainDeleteData{}

// ResultModelDomainDeleteData struct for ResultModelDomainDeleteData
type ResultModelDomainDeleteData struct {
	// The domain that was deleted
	Domain string `json:"domain"`
}

type _ResultModelDomainDeleteData ResultModelDomainDeleteData

// NewResultModelDomainDeleteData instantiates a new ResultModelDomainDeleteData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelDomainDeleteData(domain string) *ResultModelDomainDeleteData {
	this := ResultModelDomainDeleteData{}
	this.Domain = domain
	return &this
}

// NewResultModelDomainDeleteDataWithDefaults instantiates a new ResultModelDomainDeleteData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelDomainDeleteDataWithDefaults() *ResultModelDomainDeleteData {
	this := ResultModelDomainDeleteData{}
	return &this
}

// GetDomain returns the Domain field value
func (o *ResultModelDomainDeleteData) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ResultModelDomainDeleteData) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ResultModelDomainDeleteData) SetDomain(v string) {
	o.Domain = v
}

func (o ResultModelDomainDeleteData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelDomainDeleteData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	return toSerialize, nil
}

func (o *ResultModelDomainDeleteData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelDomainDeleteData := _ResultModelDomainDeleteData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelDomainDeleteData)

	if err != nil {
		return err
	}

	*o = ResultModelDomainDeleteData(varResultModelDomainDeleteData)

	return err
}

type NullableResultModelDomainDeleteData struct {
	value *ResultModelDomainDeleteData
	isSet bool
}

func (v NullableResultModelDomainDeleteData) Get() *ResultModelDomainDeleteData {
	return v.value
}

func (v *NullableResultModelDomainDeleteData) Set(val *ResultModelDomainDeleteData) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelDomainDeleteData) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelDomainDeleteData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelDomainDeleteData(val *ResultModelDomainDeleteData) *NullableResultModelDomainDeleteData {
	return &NullableResultModelDomainDeleteData{value: val, isSet: true}
}

func (v NullableResultModelDomainDeleteData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelDomainDeleteData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


