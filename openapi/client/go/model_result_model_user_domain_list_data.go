/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelUserDomainListData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelUserDomainListData{}

// ResultModelUserDomainListData Response data related to request
type ResultModelUserDomainListData struct {
	// The user the domains are associated with
	User string `json:"user"`
	// An array of objects containing the domains
	Index []ResultModelUserDomainListDataIndexInner `json:"index,omitempty"`
}

type _ResultModelUserDomainListData ResultModelUserDomainListData

// NewResultModelUserDomainListData instantiates a new ResultModelUserDomainListData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelUserDomainListData(user string) *ResultModelUserDomainListData {
	this := ResultModelUserDomainListData{}
	this.User = user
	return &this
}

// NewResultModelUserDomainListDataWithDefaults instantiates a new ResultModelUserDomainListData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelUserDomainListDataWithDefaults() *ResultModelUserDomainListData {
	this := ResultModelUserDomainListData{}
	return &this
}

// GetUser returns the User field value
func (o *ResultModelUserDomainListData) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ResultModelUserDomainListData) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ResultModelUserDomainListData) SetUser(v string) {
	o.User = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ResultModelUserDomainListData) GetIndex() []ResultModelUserDomainListDataIndexInner {
	if o == nil || IsNil(o.Index) {
		var ret []ResultModelUserDomainListDataIndexInner
		return ret
	}
	return o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelUserDomainListData) GetIndexOk() ([]ResultModelUserDomainListDataIndexInner, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ResultModelUserDomainListData) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given []ResultModelUserDomainListDataIndexInner and assigns it to the Index field.
func (o *ResultModelUserDomainListData) SetIndex(v []ResultModelUserDomainListDataIndexInner) {
	o.Index = v
}

func (o ResultModelUserDomainListData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelUserDomainListData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	return toSerialize, nil
}

func (o *ResultModelUserDomainListData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelUserDomainListData := _ResultModelUserDomainListData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelUserDomainListData)

	if err != nil {
		return err
	}

	*o = ResultModelUserDomainListData(varResultModelUserDomainListData)

	return err
}

type NullableResultModelUserDomainListData struct {
	value *ResultModelUserDomainListData
	isSet bool
}

func (v NullableResultModelUserDomainListData) Get() *ResultModelUserDomainListData {
	return v.value
}

func (v *NullableResultModelUserDomainListData) Set(val *ResultModelUserDomainListData) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelUserDomainListData) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelUserDomainListData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelUserDomainListData(val *ResultModelUserDomainListData) *NullableResultModelUserDomainListData {
	return &NullableResultModelUserDomainListData{value: val, isSet: true}
}

func (v NullableResultModelUserDomainListData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelUserDomainListData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


