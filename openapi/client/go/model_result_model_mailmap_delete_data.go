/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelMailmapDeleteData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelMailmapDeleteData{}

// ResultModelMailmapDeleteData Response data related to request
type ResultModelMailmapDeleteData struct {
	// The domain the mailmap was created for
	Domain string `json:"domain"`
	// The unique ID of the deleted mailmap
	MailmapId int32 `json:"mailmap_id"`
}

type _ResultModelMailmapDeleteData ResultModelMailmapDeleteData

// NewResultModelMailmapDeleteData instantiates a new ResultModelMailmapDeleteData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelMailmapDeleteData(domain string, mailmapId int32) *ResultModelMailmapDeleteData {
	this := ResultModelMailmapDeleteData{}
	this.Domain = domain
	this.MailmapId = mailmapId
	return &this
}

// NewResultModelMailmapDeleteDataWithDefaults instantiates a new ResultModelMailmapDeleteData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelMailmapDeleteDataWithDefaults() *ResultModelMailmapDeleteData {
	this := ResultModelMailmapDeleteData{}
	return &this
}

// GetDomain returns the Domain field value
func (o *ResultModelMailmapDeleteData) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ResultModelMailmapDeleteData) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ResultModelMailmapDeleteData) SetDomain(v string) {
	o.Domain = v
}

// GetMailmapId returns the MailmapId field value
func (o *ResultModelMailmapDeleteData) GetMailmapId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MailmapId
}

// GetMailmapIdOk returns a tuple with the MailmapId field value
// and a boolean to check if the value has been set.
func (o *ResultModelMailmapDeleteData) GetMailmapIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MailmapId, true
}

// SetMailmapId sets field value
func (o *ResultModelMailmapDeleteData) SetMailmapId(v int32) {
	o.MailmapId = v
}

func (o ResultModelMailmapDeleteData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelMailmapDeleteData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["mailmap_id"] = o.MailmapId
	return toSerialize, nil
}

func (o *ResultModelMailmapDeleteData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"mailmap_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelMailmapDeleteData := _ResultModelMailmapDeleteData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelMailmapDeleteData)

	if err != nil {
		return err
	}

	*o = ResultModelMailmapDeleteData(varResultModelMailmapDeleteData)

	return err
}

type NullableResultModelMailmapDeleteData struct {
	value *ResultModelMailmapDeleteData
	isSet bool
}

func (v NullableResultModelMailmapDeleteData) Get() *ResultModelMailmapDeleteData {
	return v.value
}

func (v *NullableResultModelMailmapDeleteData) Set(val *ResultModelMailmapDeleteData) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelMailmapDeleteData) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelMailmapDeleteData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelMailmapDeleteData(val *ResultModelMailmapDeleteData) *NullableResultModelMailmapDeleteData {
	return &NullableResultModelMailmapDeleteData{value: val, isSet: true}
}

func (v NullableResultModelMailmapDeleteData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelMailmapDeleteData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


