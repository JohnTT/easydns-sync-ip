/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelDomainInfoData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelDomainInfoData{}

// ResultModelDomainInfoData struct for ResultModelDomainInfoData
type ResultModelDomainInfoData struct {
	// The exact identifier for domain. Almost always just the domain name
	Id *string `json:"id,omitempty"`
	// The domain name the returned information is associated with
	Domain string `json:"domain"`
	// Does the domain currently exist at the registry
	Exists string `json:"exists"`
	// Does the domain currently exist on the system
	Onsystem string `json:"onsystem"`
	// Expiry date of the domain if it differs from the next_due date. Domains without registration will return a value of \"false\"
	Expiry string `json:"expiry"`
	// The date the service for the domain is next due
	NextDue string `json:"next_due"`
	// When cloning is enabled this will indicate the domain that is being cloned
	ClonedTo *string `json:"cloned_to,omitempty"`
	// The service ID that the domain is currently using
	Service int32 `json:"service"`
	// Indicates the ID of the subscription block the domain is associated with when applicable
	SubBlock *int32 `json:"sub_block,omitempty"`
}

type _ResultModelDomainInfoData ResultModelDomainInfoData

// NewResultModelDomainInfoData instantiates a new ResultModelDomainInfoData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelDomainInfoData(domain string, exists string, onsystem string, expiry string, nextDue string, service int32) *ResultModelDomainInfoData {
	this := ResultModelDomainInfoData{}
	this.Domain = domain
	this.Exists = exists
	this.Onsystem = onsystem
	this.Expiry = expiry
	this.NextDue = nextDue
	this.Service = service
	return &this
}

// NewResultModelDomainInfoDataWithDefaults instantiates a new ResultModelDomainInfoData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelDomainInfoDataWithDefaults() *ResultModelDomainInfoData {
	this := ResultModelDomainInfoData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResultModelDomainInfoData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelDomainInfoData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResultModelDomainInfoData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResultModelDomainInfoData) SetId(v string) {
	o.Id = &v
}

// GetDomain returns the Domain field value
func (o *ResultModelDomainInfoData) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ResultModelDomainInfoData) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ResultModelDomainInfoData) SetDomain(v string) {
	o.Domain = v
}

// GetExists returns the Exists field value
func (o *ResultModelDomainInfoData) GetExists() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exists
}

// GetExistsOk returns a tuple with the Exists field value
// and a boolean to check if the value has been set.
func (o *ResultModelDomainInfoData) GetExistsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exists, true
}

// SetExists sets field value
func (o *ResultModelDomainInfoData) SetExists(v string) {
	o.Exists = v
}

// GetOnsystem returns the Onsystem field value
func (o *ResultModelDomainInfoData) GetOnsystem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Onsystem
}

// GetOnsystemOk returns a tuple with the Onsystem field value
// and a boolean to check if the value has been set.
func (o *ResultModelDomainInfoData) GetOnsystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Onsystem, true
}

// SetOnsystem sets field value
func (o *ResultModelDomainInfoData) SetOnsystem(v string) {
	o.Onsystem = v
}

// GetExpiry returns the Expiry field value
func (o *ResultModelDomainInfoData) GetExpiry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value
// and a boolean to check if the value has been set.
func (o *ResultModelDomainInfoData) GetExpiryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expiry, true
}

// SetExpiry sets field value
func (o *ResultModelDomainInfoData) SetExpiry(v string) {
	o.Expiry = v
}

// GetNextDue returns the NextDue field value
func (o *ResultModelDomainInfoData) GetNextDue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextDue
}

// GetNextDueOk returns a tuple with the NextDue field value
// and a boolean to check if the value has been set.
func (o *ResultModelDomainInfoData) GetNextDueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextDue, true
}

// SetNextDue sets field value
func (o *ResultModelDomainInfoData) SetNextDue(v string) {
	o.NextDue = v
}

// GetClonedTo returns the ClonedTo field value if set, zero value otherwise.
func (o *ResultModelDomainInfoData) GetClonedTo() string {
	if o == nil || IsNil(o.ClonedTo) {
		var ret string
		return ret
	}
	return *o.ClonedTo
}

// GetClonedToOk returns a tuple with the ClonedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelDomainInfoData) GetClonedToOk() (*string, bool) {
	if o == nil || IsNil(o.ClonedTo) {
		return nil, false
	}
	return o.ClonedTo, true
}

// HasClonedTo returns a boolean if a field has been set.
func (o *ResultModelDomainInfoData) HasClonedTo() bool {
	if o != nil && !IsNil(o.ClonedTo) {
		return true
	}

	return false
}

// SetClonedTo gets a reference to the given string and assigns it to the ClonedTo field.
func (o *ResultModelDomainInfoData) SetClonedTo(v string) {
	o.ClonedTo = &v
}

// GetService returns the Service field value
func (o *ResultModelDomainInfoData) GetService() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *ResultModelDomainInfoData) GetServiceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *ResultModelDomainInfoData) SetService(v int32) {
	o.Service = v
}

// GetSubBlock returns the SubBlock field value if set, zero value otherwise.
func (o *ResultModelDomainInfoData) GetSubBlock() int32 {
	if o == nil || IsNil(o.SubBlock) {
		var ret int32
		return ret
	}
	return *o.SubBlock
}

// GetSubBlockOk returns a tuple with the SubBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelDomainInfoData) GetSubBlockOk() (*int32, bool) {
	if o == nil || IsNil(o.SubBlock) {
		return nil, false
	}
	return o.SubBlock, true
}

// HasSubBlock returns a boolean if a field has been set.
func (o *ResultModelDomainInfoData) HasSubBlock() bool {
	if o != nil && !IsNil(o.SubBlock) {
		return true
	}

	return false
}

// SetSubBlock gets a reference to the given int32 and assigns it to the SubBlock field.
func (o *ResultModelDomainInfoData) SetSubBlock(v int32) {
	o.SubBlock = &v
}

func (o ResultModelDomainInfoData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelDomainInfoData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["domain"] = o.Domain
	toSerialize["exists"] = o.Exists
	toSerialize["onsystem"] = o.Onsystem
	toSerialize["expiry"] = o.Expiry
	toSerialize["next_due"] = o.NextDue
	if !IsNil(o.ClonedTo) {
		toSerialize["cloned_to"] = o.ClonedTo
	}
	toSerialize["service"] = o.Service
	if !IsNil(o.SubBlock) {
		toSerialize["sub_block"] = o.SubBlock
	}
	return toSerialize, nil
}

func (o *ResultModelDomainInfoData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"exists",
		"onsystem",
		"expiry",
		"next_due",
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelDomainInfoData := _ResultModelDomainInfoData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelDomainInfoData)

	if err != nil {
		return err
	}

	*o = ResultModelDomainInfoData(varResultModelDomainInfoData)

	return err
}

type NullableResultModelDomainInfoData struct {
	value *ResultModelDomainInfoData
	isSet bool
}

func (v NullableResultModelDomainInfoData) Get() *ResultModelDomainInfoData {
	return v.value
}

func (v *NullableResultModelDomainInfoData) Set(val *ResultModelDomainInfoData) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelDomainInfoData) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelDomainInfoData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelDomainInfoData(val *ResultModelDomainInfoData) *NullableResultModelDomainInfoData {
	return &NullableResultModelDomainInfoData{value: val, isSet: true}
}

func (v NullableResultModelDomainInfoData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelDomainInfoData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


