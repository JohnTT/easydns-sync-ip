/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegDataExtraBR type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegDataExtraBR{}

// RegDataExtraBR Valid CPF/CNPJ Number
type RegDataExtraBR struct {
	BrRegisterNumber string `json:"br_register_number"`
}

type _RegDataExtraBR RegDataExtraBR

// NewRegDataExtraBR instantiates a new RegDataExtraBR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegDataExtraBR(brRegisterNumber string) *RegDataExtraBR {
	this := RegDataExtraBR{}
	this.BrRegisterNumber = brRegisterNumber
	return &this
}

// NewRegDataExtraBRWithDefaults instantiates a new RegDataExtraBR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegDataExtraBRWithDefaults() *RegDataExtraBR {
	this := RegDataExtraBR{}
	return &this
}

// GetBrRegisterNumber returns the BrRegisterNumber field value
func (o *RegDataExtraBR) GetBrRegisterNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BrRegisterNumber
}

// GetBrRegisterNumberOk returns a tuple with the BrRegisterNumber field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraBR) GetBrRegisterNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrRegisterNumber, true
}

// SetBrRegisterNumber sets field value
func (o *RegDataExtraBR) SetBrRegisterNumber(v string) {
	o.BrRegisterNumber = v
}

func (o RegDataExtraBR) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegDataExtraBR) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["br_register_number"] = o.BrRegisterNumber
	return toSerialize, nil
}

func (o *RegDataExtraBR) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"br_register_number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegDataExtraBR := _RegDataExtraBR{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegDataExtraBR)

	if err != nil {
		return err
	}

	*o = RegDataExtraBR(varRegDataExtraBR)

	return err
}

type NullableRegDataExtraBR struct {
	value *RegDataExtraBR
	isSet bool
}

func (v NullableRegDataExtraBR) Get() *RegDataExtraBR {
	return v.value
}

func (v *NullableRegDataExtraBR) Set(val *RegDataExtraBR) {
	v.value = val
	v.isSet = true
}

func (v NullableRegDataExtraBR) IsSet() bool {
	return v.isSet
}

func (v *NullableRegDataExtraBR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegDataExtraBR(val *RegDataExtraBR) *NullableRegDataExtraBR {
	return &NullableRegDataExtraBR{value: val, isSet: true}
}

func (v NullableRegDataExtraBR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegDataExtraBR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


