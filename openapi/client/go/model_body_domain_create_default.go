/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BodyDomainCreateDefault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodyDomainCreateDefault{}

// BodyDomainCreateDefault struct for BodyDomainCreateDefault
type BodyDomainCreateDefault struct {
	Service string `json:"service"`
	// The term (in years) to create the domain for. If domain is being registered this is also the term it will be registered for
	Term int32 `json:"term"`
	// The currency to use when processing billing for the new domain
	Currency string `json:"currency"`
	// Should this domain be added for DNS service only (excluding registration)? Requests that do not set this value will attempt registration of the provided domain name
	DnsOnly *int32 `json:"dns_only,omitempty"`
	Nameservers []string `json:"nameservers,omitempty"`
	// The name of the portfolio to automatically assign this domain to when domain is created. The portfolio provided MUST already exist and originate from the same user as the user who will control the domain. *This parameter has been deprecated by the domain_group parameter.*
	// Deprecated
	Portfolio *string `json:"portfolio,omitempty"`
	// The name of the domain group to automatically assign this domain to when domain is created. The domain group provided MUST already exist and originate from the same user as the user who will control the domain
	DomainGroup *string `json:"domain_group,omitempty"`
	// The primary nameserver(s) to use when adding a new secondary domain to the system. Providing this value will cause the domain to be set to secondary automatically and the zone transfer process to start. Multiple masters should be separated by a semi-colon and no spaces (i.e. '1.2.3.4;5.6.7.8').
	PrimaryNs *string `json:"primary_ns,omitempty"`
	Contacts *ContactDataSet `json:"contacts,omitempty"`
	Extra NullableBodyDomainCreateDefaultExtra `json:"extra,omitempty"`
}

type _BodyDomainCreateDefault BodyDomainCreateDefault

// NewBodyDomainCreateDefault instantiates a new BodyDomainCreateDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodyDomainCreateDefault(service string, term int32, currency string) *BodyDomainCreateDefault {
	this := BodyDomainCreateDefault{}
	this.Service = service
	this.Term = term
	this.Currency = currency
	var dnsOnly int32 = 0
	this.DnsOnly = &dnsOnly
	return &this
}

// NewBodyDomainCreateDefaultWithDefaults instantiates a new BodyDomainCreateDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodyDomainCreateDefaultWithDefaults() *BodyDomainCreateDefault {
	this := BodyDomainCreateDefault{}
	var dnsOnly int32 = 0
	this.DnsOnly = &dnsOnly
	return &this
}

// GetService returns the Service field value
func (o *BodyDomainCreateDefault) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDefault) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *BodyDomainCreateDefault) SetService(v string) {
	o.Service = v
}

// GetTerm returns the Term field value
func (o *BodyDomainCreateDefault) GetTerm() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Term
}

// GetTermOk returns a tuple with the Term field value
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDefault) GetTermOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Term, true
}

// SetTerm sets field value
func (o *BodyDomainCreateDefault) SetTerm(v int32) {
	o.Term = v
}

// GetCurrency returns the Currency field value
func (o *BodyDomainCreateDefault) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDefault) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *BodyDomainCreateDefault) SetCurrency(v string) {
	o.Currency = v
}

// GetDnsOnly returns the DnsOnly field value if set, zero value otherwise.
func (o *BodyDomainCreateDefault) GetDnsOnly() int32 {
	if o == nil || IsNil(o.DnsOnly) {
		var ret int32
		return ret
	}
	return *o.DnsOnly
}

// GetDnsOnlyOk returns a tuple with the DnsOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDefault) GetDnsOnlyOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsOnly) {
		return nil, false
	}
	return o.DnsOnly, true
}

// HasDnsOnly returns a boolean if a field has been set.
func (o *BodyDomainCreateDefault) HasDnsOnly() bool {
	if o != nil && !IsNil(o.DnsOnly) {
		return true
	}

	return false
}

// SetDnsOnly gets a reference to the given int32 and assigns it to the DnsOnly field.
func (o *BodyDomainCreateDefault) SetDnsOnly(v int32) {
	o.DnsOnly = &v
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *BodyDomainCreateDefault) GetNameservers() []string {
	if o == nil || IsNil(o.Nameservers) {
		var ret []string
		return ret
	}
	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDefault) GetNameserversOk() ([]string, bool) {
	if o == nil || IsNil(o.Nameservers) {
		return nil, false
	}
	return o.Nameservers, true
}

// HasNameservers returns a boolean if a field has been set.
func (o *BodyDomainCreateDefault) HasNameservers() bool {
	if o != nil && !IsNil(o.Nameservers) {
		return true
	}

	return false
}

// SetNameservers gets a reference to the given []string and assigns it to the Nameservers field.
func (o *BodyDomainCreateDefault) SetNameservers(v []string) {
	o.Nameservers = v
}

// GetPortfolio returns the Portfolio field value if set, zero value otherwise.
// Deprecated
func (o *BodyDomainCreateDefault) GetPortfolio() string {
	if o == nil || IsNil(o.Portfolio) {
		var ret string
		return ret
	}
	return *o.Portfolio
}

// GetPortfolioOk returns a tuple with the Portfolio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BodyDomainCreateDefault) GetPortfolioOk() (*string, bool) {
	if o == nil || IsNil(o.Portfolio) {
		return nil, false
	}
	return o.Portfolio, true
}

// HasPortfolio returns a boolean if a field has been set.
func (o *BodyDomainCreateDefault) HasPortfolio() bool {
	if o != nil && !IsNil(o.Portfolio) {
		return true
	}

	return false
}

// SetPortfolio gets a reference to the given string and assigns it to the Portfolio field.
// Deprecated
func (o *BodyDomainCreateDefault) SetPortfolio(v string) {
	o.Portfolio = &v
}

// GetDomainGroup returns the DomainGroup field value if set, zero value otherwise.
func (o *BodyDomainCreateDefault) GetDomainGroup() string {
	if o == nil || IsNil(o.DomainGroup) {
		var ret string
		return ret
	}
	return *o.DomainGroup
}

// GetDomainGroupOk returns a tuple with the DomainGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDefault) GetDomainGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DomainGroup) {
		return nil, false
	}
	return o.DomainGroup, true
}

// HasDomainGroup returns a boolean if a field has been set.
func (o *BodyDomainCreateDefault) HasDomainGroup() bool {
	if o != nil && !IsNil(o.DomainGroup) {
		return true
	}

	return false
}

// SetDomainGroup gets a reference to the given string and assigns it to the DomainGroup field.
func (o *BodyDomainCreateDefault) SetDomainGroup(v string) {
	o.DomainGroup = &v
}

// GetPrimaryNs returns the PrimaryNs field value if set, zero value otherwise.
func (o *BodyDomainCreateDefault) GetPrimaryNs() string {
	if o == nil || IsNil(o.PrimaryNs) {
		var ret string
		return ret
	}
	return *o.PrimaryNs
}

// GetPrimaryNsOk returns a tuple with the PrimaryNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDefault) GetPrimaryNsOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryNs) {
		return nil, false
	}
	return o.PrimaryNs, true
}

// HasPrimaryNs returns a boolean if a field has been set.
func (o *BodyDomainCreateDefault) HasPrimaryNs() bool {
	if o != nil && !IsNil(o.PrimaryNs) {
		return true
	}

	return false
}

// SetPrimaryNs gets a reference to the given string and assigns it to the PrimaryNs field.
func (o *BodyDomainCreateDefault) SetPrimaryNs(v string) {
	o.PrimaryNs = &v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *BodyDomainCreateDefault) GetContacts() ContactDataSet {
	if o == nil || IsNil(o.Contacts) {
		var ret ContactDataSet
		return ret
	}
	return *o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodyDomainCreateDefault) GetContactsOk() (*ContactDataSet, bool) {
	if o == nil || IsNil(o.Contacts) {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *BodyDomainCreateDefault) HasContacts() bool {
	if o != nil && !IsNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given ContactDataSet and assigns it to the Contacts field.
func (o *BodyDomainCreateDefault) SetContacts(v ContactDataSet) {
	o.Contacts = &v
}

// GetExtra returns the Extra field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BodyDomainCreateDefault) GetExtra() BodyDomainCreateDefaultExtra {
	if o == nil || IsNil(o.Extra.Get()) {
		var ret BodyDomainCreateDefaultExtra
		return ret
	}
	return *o.Extra.Get()
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BodyDomainCreateDefault) GetExtraOk() (*BodyDomainCreateDefaultExtra, bool) {
	if o == nil {
		return nil, false
	}
	return o.Extra.Get(), o.Extra.IsSet()
}

// HasExtra returns a boolean if a field has been set.
func (o *BodyDomainCreateDefault) HasExtra() bool {
	if o != nil && o.Extra.IsSet() {
		return true
	}

	return false
}

// SetExtra gets a reference to the given NullableBodyDomainCreateDefaultExtra and assigns it to the Extra field.
func (o *BodyDomainCreateDefault) SetExtra(v BodyDomainCreateDefaultExtra) {
	o.Extra.Set(&v)
}
// SetExtraNil sets the value for Extra to be an explicit nil
func (o *BodyDomainCreateDefault) SetExtraNil() {
	o.Extra.Set(nil)
}

// UnsetExtra ensures that no value is present for Extra, not even an explicit nil
func (o *BodyDomainCreateDefault) UnsetExtra() {
	o.Extra.Unset()
}

func (o BodyDomainCreateDefault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodyDomainCreateDefault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service"] = o.Service
	toSerialize["term"] = o.Term
	toSerialize["currency"] = o.Currency
	if !IsNil(o.DnsOnly) {
		toSerialize["dns_only"] = o.DnsOnly
	}
	if !IsNil(o.Nameservers) {
		toSerialize["nameservers"] = o.Nameservers
	}
	if !IsNil(o.Portfolio) {
		toSerialize["portfolio"] = o.Portfolio
	}
	if !IsNil(o.DomainGroup) {
		toSerialize["domain_group"] = o.DomainGroup
	}
	if !IsNil(o.PrimaryNs) {
		toSerialize["primary_ns"] = o.PrimaryNs
	}
	if !IsNil(o.Contacts) {
		toSerialize["contacts"] = o.Contacts
	}
	if o.Extra.IsSet() {
		toSerialize["extra"] = o.Extra.Get()
	}
	return toSerialize, nil
}

func (o *BodyDomainCreateDefault) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service",
		"term",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBodyDomainCreateDefault := _BodyDomainCreateDefault{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBodyDomainCreateDefault)

	if err != nil {
		return err
	}

	*o = BodyDomainCreateDefault(varBodyDomainCreateDefault)

	return err
}

type NullableBodyDomainCreateDefault struct {
	value *BodyDomainCreateDefault
	isSet bool
}

func (v NullableBodyDomainCreateDefault) Get() *BodyDomainCreateDefault {
	return v.value
}

func (v *NullableBodyDomainCreateDefault) Set(val *BodyDomainCreateDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableBodyDomainCreateDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableBodyDomainCreateDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodyDomainCreateDefault(val *BodyDomainCreateDefault) *NullableBodyDomainCreateDefault {
	return &NullableBodyDomainCreateDefault{value: val, isSet: true}
}

func (v NullableBodyDomainCreateDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodyDomainCreateDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


