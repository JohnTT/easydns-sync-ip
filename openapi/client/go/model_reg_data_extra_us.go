/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegDataExtraUS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegDataExtraUS{}

// RegDataExtraUS struct for RegDataExtraUS
type RegDataExtraUS struct {
	// Application purpose
	AppPurpose string `json:"app_purpose"`
	// Application category
	Category string `json:"category"`
	// Country of Citizenship (2 letter ISO country code)
	Validator string `json:"validator"`
}

type _RegDataExtraUS RegDataExtraUS

// NewRegDataExtraUS instantiates a new RegDataExtraUS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegDataExtraUS(appPurpose string, category string, validator string) *RegDataExtraUS {
	this := RegDataExtraUS{}
	this.AppPurpose = appPurpose
	this.Category = category
	this.Validator = validator
	return &this
}

// NewRegDataExtraUSWithDefaults instantiates a new RegDataExtraUS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegDataExtraUSWithDefaults() *RegDataExtraUS {
	this := RegDataExtraUS{}
	return &this
}

// GetAppPurpose returns the AppPurpose field value
func (o *RegDataExtraUS) GetAppPurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppPurpose
}

// GetAppPurposeOk returns a tuple with the AppPurpose field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraUS) GetAppPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppPurpose, true
}

// SetAppPurpose sets field value
func (o *RegDataExtraUS) SetAppPurpose(v string) {
	o.AppPurpose = v
}

// GetCategory returns the Category field value
func (o *RegDataExtraUS) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraUS) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *RegDataExtraUS) SetCategory(v string) {
	o.Category = v
}

// GetValidator returns the Validator field value
func (o *RegDataExtraUS) GetValidator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraUS) GetValidatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Validator, true
}

// SetValidator sets field value
func (o *RegDataExtraUS) SetValidator(v string) {
	o.Validator = v
}

func (o RegDataExtraUS) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegDataExtraUS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["app_purpose"] = o.AppPurpose
	toSerialize["category"] = o.Category
	toSerialize["validator"] = o.Validator
	return toSerialize, nil
}

func (o *RegDataExtraUS) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"app_purpose",
		"category",
		"validator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegDataExtraUS := _RegDataExtraUS{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegDataExtraUS)

	if err != nil {
		return err
	}

	*o = RegDataExtraUS(varRegDataExtraUS)

	return err
}

type NullableRegDataExtraUS struct {
	value *RegDataExtraUS
	isSet bool
}

func (v NullableRegDataExtraUS) Get() *RegDataExtraUS {
	return v.value
}

func (v *NullableRegDataExtraUS) Set(val *RegDataExtraUS) {
	v.value = val
	v.isSet = true
}

func (v NullableRegDataExtraUS) IsSet() bool {
	return v.isSet
}

func (v *NullableRegDataExtraUS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegDataExtraUS(val *RegDataExtraUS) *NullableRegDataExtraUS {
	return &NullableRegDataExtraUS{value: val, isSet: true}
}

func (v NullableRegDataExtraUS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegDataExtraUS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


