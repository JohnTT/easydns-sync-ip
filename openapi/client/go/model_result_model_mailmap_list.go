/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelMailmapList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelMailmapList{}

// ResultModelMailmapList struct for ResultModelMailmapList
type ResultModelMailmapList struct {
	Status int32 `json:"status"`
	// The unix timestamp the request was made
	Tm int32 `json:"tm"`
	Data *ResultModelMailmapListData `json:"data,omitempty"`
}

type _ResultModelMailmapList ResultModelMailmapList

// NewResultModelMailmapList instantiates a new ResultModelMailmapList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelMailmapList(status int32, tm int32) *ResultModelMailmapList {
	this := ResultModelMailmapList{}
	this.Status = status
	this.Tm = tm
	return &this
}

// NewResultModelMailmapListWithDefaults instantiates a new ResultModelMailmapList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelMailmapListWithDefaults() *ResultModelMailmapList {
	this := ResultModelMailmapList{}
	return &this
}

// GetStatus returns the Status field value
func (o *ResultModelMailmapList) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ResultModelMailmapList) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ResultModelMailmapList) SetStatus(v int32) {
	o.Status = v
}

// GetTm returns the Tm field value
func (o *ResultModelMailmapList) GetTm() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Tm
}

// GetTmOk returns a tuple with the Tm field value
// and a boolean to check if the value has been set.
func (o *ResultModelMailmapList) GetTmOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tm, true
}

// SetTm sets field value
func (o *ResultModelMailmapList) SetTm(v int32) {
	o.Tm = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ResultModelMailmapList) GetData() ResultModelMailmapListData {
	if o == nil || IsNil(o.Data) {
		var ret ResultModelMailmapListData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelMailmapList) GetDataOk() (*ResultModelMailmapListData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ResultModelMailmapList) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ResultModelMailmapListData and assigns it to the Data field.
func (o *ResultModelMailmapList) SetData(v ResultModelMailmapListData) {
	o.Data = &v
}

func (o ResultModelMailmapList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelMailmapList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["tm"] = o.Tm
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *ResultModelMailmapList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"tm",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelMailmapList := _ResultModelMailmapList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelMailmapList)

	if err != nil {
		return err
	}

	*o = ResultModelMailmapList(varResultModelMailmapList)

	return err
}

type NullableResultModelMailmapList struct {
	value *ResultModelMailmapList
	isSet bool
}

func (v NullableResultModelMailmapList) Get() *ResultModelMailmapList {
	return v.value
}

func (v *NullableResultModelMailmapList) Set(val *ResultModelMailmapList) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelMailmapList) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelMailmapList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelMailmapList(val *ResultModelMailmapList) *NullableResultModelMailmapList {
	return &NullableResultModelMailmapList{value: val, isSet: true}
}

func (v NullableResultModelMailmapList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelMailmapList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


