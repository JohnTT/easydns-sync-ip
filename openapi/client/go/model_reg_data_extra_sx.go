/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegDataExtraSX type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegDataExtraSX{}

// RegDataExtraSX struct for RegDataExtraSX
type RegDataExtraSX struct {
	// Registrant type
	RegistrantType string `json:"registrant_type"`
	// ID Card Number
	IdCardNumber string `json:"id_card_number"`
	// Value Added Tax (VAT) number
	RegistrantVatId *string `json:"registrant_vat_id,omitempty"`
	// Business number
	RegistrationNumber string `json:"registration_number"`
}

type _RegDataExtraSX RegDataExtraSX

// NewRegDataExtraSX instantiates a new RegDataExtraSX object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegDataExtraSX(registrantType string, idCardNumber string, registrationNumber string) *RegDataExtraSX {
	this := RegDataExtraSX{}
	this.RegistrantType = registrantType
	this.IdCardNumber = idCardNumber
	this.RegistrationNumber = registrationNumber
	return &this
}

// NewRegDataExtraSXWithDefaults instantiates a new RegDataExtraSX object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegDataExtraSXWithDefaults() *RegDataExtraSX {
	this := RegDataExtraSX{}
	return &this
}

// GetRegistrantType returns the RegistrantType field value
func (o *RegDataExtraSX) GetRegistrantType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistrantType
}

// GetRegistrantTypeOk returns a tuple with the RegistrantType field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraSX) GetRegistrantTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistrantType, true
}

// SetRegistrantType sets field value
func (o *RegDataExtraSX) SetRegistrantType(v string) {
	o.RegistrantType = v
}

// GetIdCardNumber returns the IdCardNumber field value
func (o *RegDataExtraSX) GetIdCardNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdCardNumber
}

// GetIdCardNumberOk returns a tuple with the IdCardNumber field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraSX) GetIdCardNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdCardNumber, true
}

// SetIdCardNumber sets field value
func (o *RegDataExtraSX) SetIdCardNumber(v string) {
	o.IdCardNumber = v
}

// GetRegistrantVatId returns the RegistrantVatId field value if set, zero value otherwise.
func (o *RegDataExtraSX) GetRegistrantVatId() string {
	if o == nil || IsNil(o.RegistrantVatId) {
		var ret string
		return ret
	}
	return *o.RegistrantVatId
}

// GetRegistrantVatIdOk returns a tuple with the RegistrantVatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegDataExtraSX) GetRegistrantVatIdOk() (*string, bool) {
	if o == nil || IsNil(o.RegistrantVatId) {
		return nil, false
	}
	return o.RegistrantVatId, true
}

// HasRegistrantVatId returns a boolean if a field has been set.
func (o *RegDataExtraSX) HasRegistrantVatId() bool {
	if o != nil && !IsNil(o.RegistrantVatId) {
		return true
	}

	return false
}

// SetRegistrantVatId gets a reference to the given string and assigns it to the RegistrantVatId field.
func (o *RegDataExtraSX) SetRegistrantVatId(v string) {
	o.RegistrantVatId = &v
}

// GetRegistrationNumber returns the RegistrationNumber field value
func (o *RegDataExtraSX) GetRegistrationNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistrationNumber
}

// GetRegistrationNumberOk returns a tuple with the RegistrationNumber field value
// and a boolean to check if the value has been set.
func (o *RegDataExtraSX) GetRegistrationNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistrationNumber, true
}

// SetRegistrationNumber sets field value
func (o *RegDataExtraSX) SetRegistrationNumber(v string) {
	o.RegistrationNumber = v
}

func (o RegDataExtraSX) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegDataExtraSX) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registrant_type"] = o.RegistrantType
	toSerialize["id_card_number"] = o.IdCardNumber
	if !IsNil(o.RegistrantVatId) {
		toSerialize["registrant_vat_id"] = o.RegistrantVatId
	}
	toSerialize["registration_number"] = o.RegistrationNumber
	return toSerialize, nil
}

func (o *RegDataExtraSX) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registrant_type",
		"id_card_number",
		"registration_number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegDataExtraSX := _RegDataExtraSX{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegDataExtraSX)

	if err != nil {
		return err
	}

	*o = RegDataExtraSX(varRegDataExtraSX)

	return err
}

type NullableRegDataExtraSX struct {
	value *RegDataExtraSX
	isSet bool
}

func (v NullableRegDataExtraSX) Get() *RegDataExtraSX {
	return v.value
}

func (v *NullableRegDataExtraSX) Set(val *RegDataExtraSX) {
	v.value = val
	v.isSet = true
}

func (v NullableRegDataExtraSX) IsSet() bool {
	return v.isSet
}

func (v *NullableRegDataExtraSX) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegDataExtraSX(val *RegDataExtraSX) *NullableRegDataExtraSX {
	return &NullableRegDataExtraSX{value: val, isSet: true}
}

func (v NullableRegDataExtraSX) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegDataExtraSX) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


