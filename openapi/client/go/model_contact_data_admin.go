/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContactDataAdmin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactDataAdmin{}

// ContactDataAdmin struct for ContactDataAdmin
type ContactDataAdmin struct {
	FirstName string `json:"first_name"`
	LastName string `json:"last_name"`
	// Contact organization
	OrgName *string `json:"org_name,omitempty"`
	Address1 string `json:"address1"`
	Address2 *string `json:"address2,omitempty"`
	City string `json:"city"`
	// Province or state of contact
	State string `json:"state"`
	// 2 letter ISO country code
	Country string `json:"country"`
	// Postal code or zip code of contact
	PostalCode string `json:"postal_code"`
	Phone string `json:"phone"`
	Email string `json:"email"`
}

type _ContactDataAdmin ContactDataAdmin

// NewContactDataAdmin instantiates a new ContactDataAdmin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactDataAdmin(firstName string, lastName string, address1 string, city string, state string, country string, postalCode string, phone string, email string) *ContactDataAdmin {
	this := ContactDataAdmin{}
	this.FirstName = firstName
	this.LastName = lastName
	this.Address1 = address1
	this.City = city
	this.State = state
	this.Country = country
	this.PostalCode = postalCode
	this.Phone = phone
	this.Email = email
	return &this
}

// NewContactDataAdminWithDefaults instantiates a new ContactDataAdmin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactDataAdminWithDefaults() *ContactDataAdmin {
	this := ContactDataAdmin{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *ContactDataAdmin) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *ContactDataAdmin) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *ContactDataAdmin) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *ContactDataAdmin) SetLastName(v string) {
	o.LastName = v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *ContactDataAdmin) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *ContactDataAdmin) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *ContactDataAdmin) SetOrgName(v string) {
	o.OrgName = &v
}

// GetAddress1 returns the Address1 field value
func (o *ContactDataAdmin) GetAddress1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetAddress1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address1, true
}

// SetAddress1 sets field value
func (o *ContactDataAdmin) SetAddress1(v string) {
	o.Address1 = v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *ContactDataAdmin) GetAddress2() string {
	if o == nil || IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *ContactDataAdmin) HasAddress2() bool {
	if o != nil && !IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *ContactDataAdmin) SetAddress2(v string) {
	o.Address2 = &v
}

// GetCity returns the City field value
func (o *ContactDataAdmin) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *ContactDataAdmin) SetCity(v string) {
	o.City = v
}

// GetState returns the State field value
func (o *ContactDataAdmin) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ContactDataAdmin) SetState(v string) {
	o.State = v
}

// GetCountry returns the Country field value
func (o *ContactDataAdmin) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *ContactDataAdmin) SetCountry(v string) {
	o.Country = v
}

// GetPostalCode returns the PostalCode field value
func (o *ContactDataAdmin) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *ContactDataAdmin) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetPhone returns the Phone field value
func (o *ContactDataAdmin) GetPhone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phone, true
}

// SetPhone sets field value
func (o *ContactDataAdmin) SetPhone(v string) {
	o.Phone = v
}

// GetEmail returns the Email field value
func (o *ContactDataAdmin) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ContactDataAdmin) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ContactDataAdmin) SetEmail(v string) {
	o.Email = v
}

func (o ContactDataAdmin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactDataAdmin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	if !IsNil(o.OrgName) {
		toSerialize["org_name"] = o.OrgName
	}
	toSerialize["address1"] = o.Address1
	if !IsNil(o.Address2) {
		toSerialize["address2"] = o.Address2
	}
	toSerialize["city"] = o.City
	toSerialize["state"] = o.State
	toSerialize["country"] = o.Country
	toSerialize["postal_code"] = o.PostalCode
	toSerialize["phone"] = o.Phone
	toSerialize["email"] = o.Email
	return toSerialize, nil
}

func (o *ContactDataAdmin) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"first_name",
		"last_name",
		"address1",
		"city",
		"state",
		"country",
		"postal_code",
		"phone",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactDataAdmin := _ContactDataAdmin{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactDataAdmin)

	if err != nil {
		return err
	}

	*o = ContactDataAdmin(varContactDataAdmin)

	return err
}

type NullableContactDataAdmin struct {
	value *ContactDataAdmin
	isSet bool
}

func (v NullableContactDataAdmin) Get() *ContactDataAdmin {
	return v.value
}

func (v *NullableContactDataAdmin) Set(val *ContactDataAdmin) {
	v.value = val
	v.isSet = true
}

func (v NullableContactDataAdmin) IsSet() bool {
	return v.isSet
}

func (v *NullableContactDataAdmin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactDataAdmin(val *ContactDataAdmin) *NullableContactDataAdmin {
	return &NullableContactDataAdmin{value: val, isSet: true}
}

func (v NullableContactDataAdmin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactDataAdmin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


