/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelMailmapListData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelMailmapListData{}

// ResultModelMailmapListData struct for ResultModelMailmapListData
type ResultModelMailmapListData struct {
	// Domain name the mailmaps below to
	Domain string `json:"domain"`
	// List of mailmaps defined for a domain
	Mailmaps []ResultModelMailmapListItem `json:"mailmaps"`
}

type _ResultModelMailmapListData ResultModelMailmapListData

// NewResultModelMailmapListData instantiates a new ResultModelMailmapListData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelMailmapListData(domain string, mailmaps []ResultModelMailmapListItem) *ResultModelMailmapListData {
	this := ResultModelMailmapListData{}
	this.Domain = domain
	this.Mailmaps = mailmaps
	return &this
}

// NewResultModelMailmapListDataWithDefaults instantiates a new ResultModelMailmapListData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelMailmapListDataWithDefaults() *ResultModelMailmapListData {
	this := ResultModelMailmapListData{}
	return &this
}

// GetDomain returns the Domain field value
func (o *ResultModelMailmapListData) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ResultModelMailmapListData) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ResultModelMailmapListData) SetDomain(v string) {
	o.Domain = v
}

// GetMailmaps returns the Mailmaps field value
func (o *ResultModelMailmapListData) GetMailmaps() []ResultModelMailmapListItem {
	if o == nil {
		var ret []ResultModelMailmapListItem
		return ret
	}

	return o.Mailmaps
}

// GetMailmapsOk returns a tuple with the Mailmaps field value
// and a boolean to check if the value has been set.
func (o *ResultModelMailmapListData) GetMailmapsOk() ([]ResultModelMailmapListItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mailmaps, true
}

// SetMailmaps sets field value
func (o *ResultModelMailmapListData) SetMailmaps(v []ResultModelMailmapListItem) {
	o.Mailmaps = v
}

func (o ResultModelMailmapListData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelMailmapListData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["mailmaps"] = o.Mailmaps
	return toSerialize, nil
}

func (o *ResultModelMailmapListData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"mailmaps",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelMailmapListData := _ResultModelMailmapListData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelMailmapListData)

	if err != nil {
		return err
	}

	*o = ResultModelMailmapListData(varResultModelMailmapListData)

	return err
}

type NullableResultModelMailmapListData struct {
	value *ResultModelMailmapListData
	isSet bool
}

func (v NullableResultModelMailmapListData) Get() *ResultModelMailmapListData {
	return v.value
}

func (v *NullableResultModelMailmapListData) Set(val *ResultModelMailmapListData) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelMailmapListData) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelMailmapListData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelMailmapListData(val *ResultModelMailmapListData) *NullableResultModelMailmapListData {
	return &NullableResultModelMailmapListData{value: val, isSet: true}
}

func (v NullableResultModelMailmapListData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelMailmapListData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


