/*
EasyAPI REST Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
Contact: easyapi@easydns.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResultModelRegStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultModelRegStatus{}

// ResultModelRegStatus struct for ResultModelRegStatus
type ResultModelRegStatus struct {
	// Is reglock for domain set to on or off
	Reglock bool `json:"reglock"`
	// Indicates the current renewal action for the domain
	Renewal string `json:"renewal"`
	// Does the domain have automated renewal payments set up for this domain
	AutoRenew bool `json:"auto_renew"`
	// If a domain is set to auto_renew this field will contain the stripe card id that will be used for this domain
	AutoRenewCardId *string `json:"auto_renew_card_id,omitempty"`
	// Is the domain set to automatically expire at HRS/SRS
	LetExpire bool `json:"let_expire"`
	// This field is only present when attempts to get the let_expire value at HRS/SRS failed. Most often caused by invalid authentication info on the system for the domain
	LetExpireFailed *bool `json:"let_expire_failed,omitempty"`
	// The expiry date for the domain on the system. Either the expiry date for the domain or the date service is next due
	Expiry string `json:"expiry"`
	// Indicates if the domain is registered by us or the registrar is someone else
	LocalRegistrar bool `json:"local_registrar"`
	// Indicates if the TLD for this domain supports reglocking
	SupportsReglock bool `json:"supports_reglock"`
}

type _ResultModelRegStatus ResultModelRegStatus

// NewResultModelRegStatus instantiates a new ResultModelRegStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultModelRegStatus(reglock bool, renewal string, autoRenew bool, letExpire bool, expiry string, localRegistrar bool, supportsReglock bool) *ResultModelRegStatus {
	this := ResultModelRegStatus{}
	this.Reglock = reglock
	this.Renewal = renewal
	this.AutoRenew = autoRenew
	this.LetExpire = letExpire
	this.Expiry = expiry
	this.LocalRegistrar = localRegistrar
	this.SupportsReglock = supportsReglock
	return &this
}

// NewResultModelRegStatusWithDefaults instantiates a new ResultModelRegStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultModelRegStatusWithDefaults() *ResultModelRegStatus {
	this := ResultModelRegStatus{}
	return &this
}

// GetReglock returns the Reglock field value
func (o *ResultModelRegStatus) GetReglock() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Reglock
}

// GetReglockOk returns a tuple with the Reglock field value
// and a boolean to check if the value has been set.
func (o *ResultModelRegStatus) GetReglockOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reglock, true
}

// SetReglock sets field value
func (o *ResultModelRegStatus) SetReglock(v bool) {
	o.Reglock = v
}

// GetRenewal returns the Renewal field value
func (o *ResultModelRegStatus) GetRenewal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Renewal
}

// GetRenewalOk returns a tuple with the Renewal field value
// and a boolean to check if the value has been set.
func (o *ResultModelRegStatus) GetRenewalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Renewal, true
}

// SetRenewal sets field value
func (o *ResultModelRegStatus) SetRenewal(v string) {
	o.Renewal = v
}

// GetAutoRenew returns the AutoRenew field value
func (o *ResultModelRegStatus) GetAutoRenew() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoRenew
}

// GetAutoRenewOk returns a tuple with the AutoRenew field value
// and a boolean to check if the value has been set.
func (o *ResultModelRegStatus) GetAutoRenewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoRenew, true
}

// SetAutoRenew sets field value
func (o *ResultModelRegStatus) SetAutoRenew(v bool) {
	o.AutoRenew = v
}

// GetAutoRenewCardId returns the AutoRenewCardId field value if set, zero value otherwise.
func (o *ResultModelRegStatus) GetAutoRenewCardId() string {
	if o == nil || IsNil(o.AutoRenewCardId) {
		var ret string
		return ret
	}
	return *o.AutoRenewCardId
}

// GetAutoRenewCardIdOk returns a tuple with the AutoRenewCardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelRegStatus) GetAutoRenewCardIdOk() (*string, bool) {
	if o == nil || IsNil(o.AutoRenewCardId) {
		return nil, false
	}
	return o.AutoRenewCardId, true
}

// HasAutoRenewCardId returns a boolean if a field has been set.
func (o *ResultModelRegStatus) HasAutoRenewCardId() bool {
	if o != nil && !IsNil(o.AutoRenewCardId) {
		return true
	}

	return false
}

// SetAutoRenewCardId gets a reference to the given string and assigns it to the AutoRenewCardId field.
func (o *ResultModelRegStatus) SetAutoRenewCardId(v string) {
	o.AutoRenewCardId = &v
}

// GetLetExpire returns the LetExpire field value
func (o *ResultModelRegStatus) GetLetExpire() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LetExpire
}

// GetLetExpireOk returns a tuple with the LetExpire field value
// and a boolean to check if the value has been set.
func (o *ResultModelRegStatus) GetLetExpireOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LetExpire, true
}

// SetLetExpire sets field value
func (o *ResultModelRegStatus) SetLetExpire(v bool) {
	o.LetExpire = v
}

// GetLetExpireFailed returns the LetExpireFailed field value if set, zero value otherwise.
func (o *ResultModelRegStatus) GetLetExpireFailed() bool {
	if o == nil || IsNil(o.LetExpireFailed) {
		var ret bool
		return ret
	}
	return *o.LetExpireFailed
}

// GetLetExpireFailedOk returns a tuple with the LetExpireFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultModelRegStatus) GetLetExpireFailedOk() (*bool, bool) {
	if o == nil || IsNil(o.LetExpireFailed) {
		return nil, false
	}
	return o.LetExpireFailed, true
}

// HasLetExpireFailed returns a boolean if a field has been set.
func (o *ResultModelRegStatus) HasLetExpireFailed() bool {
	if o != nil && !IsNil(o.LetExpireFailed) {
		return true
	}

	return false
}

// SetLetExpireFailed gets a reference to the given bool and assigns it to the LetExpireFailed field.
func (o *ResultModelRegStatus) SetLetExpireFailed(v bool) {
	o.LetExpireFailed = &v
}

// GetExpiry returns the Expiry field value
func (o *ResultModelRegStatus) GetExpiry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value
// and a boolean to check if the value has been set.
func (o *ResultModelRegStatus) GetExpiryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expiry, true
}

// SetExpiry sets field value
func (o *ResultModelRegStatus) SetExpiry(v string) {
	o.Expiry = v
}

// GetLocalRegistrar returns the LocalRegistrar field value
func (o *ResultModelRegStatus) GetLocalRegistrar() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LocalRegistrar
}

// GetLocalRegistrarOk returns a tuple with the LocalRegistrar field value
// and a boolean to check if the value has been set.
func (o *ResultModelRegStatus) GetLocalRegistrarOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalRegistrar, true
}

// SetLocalRegistrar sets field value
func (o *ResultModelRegStatus) SetLocalRegistrar(v bool) {
	o.LocalRegistrar = v
}

// GetSupportsReglock returns the SupportsReglock field value
func (o *ResultModelRegStatus) GetSupportsReglock() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportsReglock
}

// GetSupportsReglockOk returns a tuple with the SupportsReglock field value
// and a boolean to check if the value has been set.
func (o *ResultModelRegStatus) GetSupportsReglockOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportsReglock, true
}

// SetSupportsReglock sets field value
func (o *ResultModelRegStatus) SetSupportsReglock(v bool) {
	o.SupportsReglock = v
}

func (o ResultModelRegStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultModelRegStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reglock"] = o.Reglock
	toSerialize["renewal"] = o.Renewal
	toSerialize["auto_renew"] = o.AutoRenew
	if !IsNil(o.AutoRenewCardId) {
		toSerialize["auto_renew_card_id"] = o.AutoRenewCardId
	}
	toSerialize["let_expire"] = o.LetExpire
	if !IsNil(o.LetExpireFailed) {
		toSerialize["let_expire_failed"] = o.LetExpireFailed
	}
	toSerialize["expiry"] = o.Expiry
	toSerialize["local_registrar"] = o.LocalRegistrar
	toSerialize["supports_reglock"] = o.SupportsReglock
	return toSerialize, nil
}

func (o *ResultModelRegStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reglock",
		"renewal",
		"auto_renew",
		"let_expire",
		"expiry",
		"local_registrar",
		"supports_reglock",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultModelRegStatus := _ResultModelRegStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultModelRegStatus)

	if err != nil {
		return err
	}

	*o = ResultModelRegStatus(varResultModelRegStatus)

	return err
}

type NullableResultModelRegStatus struct {
	value *ResultModelRegStatus
	isSet bool
}

func (v NullableResultModelRegStatus) Get() *ResultModelRegStatus {
	return v.value
}

func (v *NullableResultModelRegStatus) Set(val *ResultModelRegStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableResultModelRegStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableResultModelRegStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultModelRegStatus(val *ResultModelRegStatus) *NullableResultModelRegStatus {
	return &NullableResultModelRegStatus{value: val, isSet: true}
}

func (v NullableResultModelRegStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultModelRegStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


