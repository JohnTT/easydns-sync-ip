/*
EasyAPI REST Services API

Testing ZoneAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ZoneAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ZoneAPIService AddUXZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var type_ string

		httpRes, err := apiClient.ZoneAPI.AddUXZoneRec(context.Background(), domain, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService AddZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var type_ string

		httpRes, err := apiClient.ZoneAPI.AddZoneRec(context.Background(), domain, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService DelUXZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var id string

		httpRes, err := apiClient.ZoneAPI.DelUXZoneRec(context.Background(), domain, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService DelZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var id string

		httpRes, err := apiClient.ZoneAPI.DelZoneRec(context.Background(), domain, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService ForceZoneReload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		httpRes, err := apiClient.ZoneAPI.ForceZoneReload(context.Background(), domain).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService GetZoneSOA", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.ZoneAPI.GetZoneSOA(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService ListGeoRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ZoneAPI.ListGeoRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService ListParsedZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.ZoneAPI.ListParsedZone(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService ListZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.ZoneAPI.ListZone(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService ModUXZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ZoneAPI.ModUXZoneRec(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService ModZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ZoneAPI.ModZoneRec(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZoneAPIService SearchZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var keyword string

		resp, httpRes, err := apiClient.ZoneAPI.SearchZone(context.Background(), domain, keyword).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
