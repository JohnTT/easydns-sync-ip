/*
EasyAPI REST Services API

Testing WriteAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_WriteAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WriteAPIService AddUXZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var type_ string

		httpRes, err := apiClient.WriteAPI.AddUXZoneRec(context.Background(), domain, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService AddZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var type_ string

		httpRes, err := apiClient.WriteAPI.AddZoneRec(context.Background(), domain, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService CreateDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.WriteAPI.CreateDomain(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService CreateMailmap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.WriteAPI.CreateMailmap(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService CreateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var user string

		resp, httpRes, err := apiClient.WriteAPI.CreateUser(context.Background(), user).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService DelUXZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var id string

		httpRes, err := apiClient.WriteAPI.DelUXZoneRec(context.Background(), domain, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService DelZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var id string

		httpRes, err := apiClient.WriteAPI.DelZoneRec(context.Background(), domain, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService DeleteDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.WriteAPI.DeleteDomain(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService DeleteMailmap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var mailmapId int32

		resp, httpRes, err := apiClient.WriteAPI.DeleteMailmap(context.Background(), domain, mailmapId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService ForceZoneReload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		httpRes, err := apiClient.WriteAPI.ForceZoneReload(context.Background(), domain).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService ModUXZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.WriteAPI.ModUXZoneRec(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService ModZoneRec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.WriteAPI.ModZoneRec(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService SetPrimaryNS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.WriteAPI.SetPrimaryNS(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService SetRegStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WriteAPI.SetRegStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService UpdateMailmap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var email string

		resp, httpRes, err := apiClient.WriteAPI.UpdateMailmap(context.Background(), domain, email).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WriteAPIService UpdateUserDS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var user string

		resp, httpRes, err := apiClient.WriteAPI.UpdateUserDS(context.Background(), user).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
